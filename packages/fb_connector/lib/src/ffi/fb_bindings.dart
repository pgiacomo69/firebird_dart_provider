// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;



/// Bindings to Firebird
class FirebirdBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FirebirdBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FirebirdBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<wchar_t> _Expression,
    ffi.Pointer<wchar_t> _FunctionName,
    ffi.Pointer<wchar_t> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Uint32, uintptr_t)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<ffi.Int32> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>('_errno');
  late final __errno =
      __errnoPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int32)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int32>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  int isc_attach_database(
    ffi.Pointer<ISC_STATUS> arg0,
    int arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    ffi.Pointer<isc_db_handle> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
  ) {
    return _isc_attach_database(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_attach_databasePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<isc_db_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_attach_database');
  late final _isc_attach_database = _isc_attach_databasePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, int, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<isc_db_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_array_gen_sdl(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_ARRAY_DESC> arg1,
    ffi.Pointer<ISC_SHORT> arg2,
    ffi.Pointer<ISC_UCHAR> arg3,
    ffi.Pointer<ISC_SHORT> arg4,
  ) {
    return _isc_array_gen_sdl(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_array_gen_sdlPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_ARRAY_DESC>,
              ffi.Pointer<ISC_SHORT>,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_SHORT>)>>('isc_array_gen_sdl');
  late final _isc_array_gen_sdl = _isc_array_gen_sdlPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<ISC_ARRAY_DESC>,
          ffi.Pointer<ISC_SHORT>,
          ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ISC_SHORT>)>();

  int isc_array_get_slice(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_QUAD> arg3,
    ffi.Pointer<ISC_ARRAY_DESC> arg4,
    ffi.Pointer<ffi.Void> arg5,
    ffi.Pointer<ISC_LONG> arg6,
  ) {
    return _isc_array_get_slice(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_array_get_slicePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_QUAD>,
              ffi.Pointer<ISC_ARRAY_DESC>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_LONG>)>>('isc_array_get_slice');
  late final _isc_array_get_slice = _isc_array_get_slicePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_QUAD>,
          ffi.Pointer<ISC_ARRAY_DESC>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ISC_LONG>)>();

  int isc_array_lookup_bounds(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    ffi.Pointer<ISC_ARRAY_DESC> arg5,
  ) {
    return _isc_array_lookup_bounds(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_array_lookup_boundsPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_ARRAY_DESC>)>>('isc_array_lookup_bounds');
  late final _isc_array_lookup_bounds = _isc_array_lookup_boundsPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_ARRAY_DESC>)>();

  int isc_array_lookup_desc(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    ffi.Pointer<ISC_ARRAY_DESC> arg5,
  ) {
    return _isc_array_lookup_desc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_array_lookup_descPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_ARRAY_DESC>)>>('isc_array_lookup_desc');
  late final _isc_array_lookup_desc = _isc_array_lookup_descPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_ARRAY_DESC>)>();

  int isc_array_set_desc(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    ffi.Pointer<ffi.Int16> arg3,
    ffi.Pointer<ffi.Int16> arg4,
    ffi.Pointer<ffi.Int16> arg5,
    ffi.Pointer<ISC_ARRAY_DESC> arg6,
  ) {
    return _isc_array_set_desc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_array_set_descPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ISC_ARRAY_DESC>)>>('isc_array_set_desc');
  late final _isc_array_set_desc = _isc_array_set_descPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ISC_ARRAY_DESC>)>();

  int isc_array_put_slice(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_QUAD> arg3,
    ffi.Pointer<ISC_ARRAY_DESC> arg4,
    ffi.Pointer<ffi.Void> arg5,
    ffi.Pointer<ISC_LONG> arg6,
  ) {
    return _isc_array_put_slice(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_array_put_slicePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_QUAD>,
              ffi.Pointer<ISC_ARRAY_DESC>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_LONG>)>>('isc_array_put_slice');
  late final _isc_array_put_slice = _isc_array_put_slicePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_QUAD>,
          ffi.Pointer<ISC_ARRAY_DESC>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ISC_LONG>)>();

  void isc_blob_default_desc(
    ffi.Pointer<ISC_BLOB_DESC> arg0,
    ffi.Pointer<ISC_UCHAR> arg1,
    ffi.Pointer<ISC_UCHAR> arg2,
  ) {
    return _isc_blob_default_desc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_blob_default_descPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_BLOB_DESC>, ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_UCHAR>)>>('isc_blob_default_desc');
  late final _isc_blob_default_desc = _isc_blob_default_descPtr.asFunction<
      void Function(ffi.Pointer<ISC_BLOB_DESC>, ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ISC_UCHAR>)>();

  int isc_blob_gen_bpb(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_BLOB_DESC> arg1,
    ffi.Pointer<ISC_BLOB_DESC> arg2,
    int arg3,
    ffi.Pointer<ISC_UCHAR> arg4,
    ffi.Pointer<ffi.Uint16> arg5,
  ) {
    return _isc_blob_gen_bpb(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_blob_gen_bpbPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_BLOB_DESC>,
              ffi.Pointer<ISC_BLOB_DESC>,
              ffi.Uint16,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ffi.Uint16>)>>('isc_blob_gen_bpb');
  late final _isc_blob_gen_bpb = _isc_blob_gen_bpbPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<ISC_BLOB_DESC>,
          ffi.Pointer<ISC_BLOB_DESC>,
          int,
          ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ffi.Uint16>)>();

  int isc_blob_info(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_blob_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
  ) {
    return _isc_blob_info(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_blob_infoPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_blob_info');
  late final _isc_blob_info = _isc_blob_infoPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_blob_handle>, int,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_blob_lookup_desc(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_UCHAR> arg3,
    ffi.Pointer<ISC_UCHAR> arg4,
    ffi.Pointer<ISC_BLOB_DESC> arg5,
    ffi.Pointer<ISC_UCHAR> arg6,
  ) {
    return _isc_blob_lookup_desc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_blob_lookup_descPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_BLOB_DESC>,
              ffi.Pointer<ISC_UCHAR>)>>('isc_blob_lookup_desc');
  late final _isc_blob_lookup_desc = _isc_blob_lookup_descPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ISC_BLOB_DESC>,
          ffi.Pointer<ISC_UCHAR>)>();

  int isc_blob_set_desc(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_UCHAR> arg1,
    ffi.Pointer<ISC_UCHAR> arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ISC_BLOB_DESC> arg6,
  ) {
    return _isc_blob_set_desc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_blob_set_descPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Int16,
              ffi.Int16,
              ffi.Int16,
              ffi.Pointer<ISC_BLOB_DESC>)>>('isc_blob_set_desc');
  late final _isc_blob_set_desc = _isc_blob_set_descPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ISC_UCHAR>, int, int, int, ffi.Pointer<ISC_BLOB_DESC>)>();

  int isc_cancel_blob(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_blob_handle> arg1,
  ) {
    return _isc_cancel_blob(
      arg0,
      arg1,
    );
  }

  late final _isc_cancel_blobPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_blob_handle>)>>('isc_cancel_blob');
  late final _isc_cancel_blob = _isc_cancel_blobPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_blob_handle>)>();

  int isc_cancel_events(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<ISC_LONG> arg2,
  ) {
    return _isc_cancel_events(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_cancel_eventsPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<ISC_LONG>)>>('isc_cancel_events');
  late final _isc_cancel_events = _isc_cancel_eventsPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
          ffi.Pointer<ISC_LONG>)>();

  int isc_close_blob(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_blob_handle> arg1,
  ) {
    return _isc_close_blob(
      arg0,
      arg1,
    );
  }

  late final _isc_close_blobPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_blob_handle>)>>('isc_close_blob');
  late final _isc_close_blob = _isc_close_blobPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_blob_handle>)>();

  int isc_commit_retaining(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
  ) {
    return _isc_commit_retaining(
      arg0,
      arg1,
    );
  }

  late final _isc_commit_retainingPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>)>>('isc_commit_retaining');
  late final _isc_commit_retaining = _isc_commit_retainingPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>)>();

  int isc_commit_transaction(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
  ) {
    return _isc_commit_transaction(
      arg0,
      arg1,
    );
  }

  late final _isc_commit_transactionPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>)>>('isc_commit_transaction');
  late final _isc_commit_transaction = _isc_commit_transactionPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>)>();

  int isc_create_blob(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<isc_blob_handle> arg3,
    ffi.Pointer<ISC_QUAD> arg4,
  ) {
    return _isc_create_blob(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_create_blobPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Pointer<ISC_QUAD>)>>('isc_create_blob');
  late final _isc_create_blob = _isc_create_blobPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_blob_handle>,
          ffi.Pointer<ISC_QUAD>)>();

  int isc_create_blob2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<isc_blob_handle> arg3,
    ffi.Pointer<ISC_QUAD> arg4,
    int arg5,
    ffi.Pointer<ISC_SCHAR> arg6,
  ) {
    return _isc_create_blob2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_create_blob2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Pointer<ISC_QUAD>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_create_blob2');
  late final _isc_create_blob2 = _isc_create_blob2Ptr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_blob_handle>,
          ffi.Pointer<ISC_QUAD>,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_create_database(
    ffi.Pointer<ISC_STATUS> arg0,
    int arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    ffi.Pointer<isc_db_handle> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
    int arg6,
  ) {
    return _isc_create_database(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_create_databasePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<isc_db_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16)>>('isc_create_database');
  late final _isc_create_database = _isc_create_databasePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, int, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<isc_db_handle>, int, ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_database_info(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
  ) {
    return _isc_database_info(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_database_infoPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_database_info');
  late final _isc_database_info = _isc_database_infoPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>, int,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ISC_SCHAR>)>();

  void isc_decode_date(
    ffi.Pointer<ISC_QUAD> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _isc_decode_date(
      arg0,
      arg1,
    );
  }

  late final _isc_decode_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_QUAD>,
              ffi.Pointer<ffi.Void>)>>('isc_decode_date');
  late final _isc_decode_date = _isc_decode_datePtr.asFunction<
      void Function(ffi.Pointer<ISC_QUAD>, ffi.Pointer<ffi.Void>)>();

  void isc_decode_sql_date(
    ffi.Pointer<ISC_DATE> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _isc_decode_sql_date(
      arg0,
      arg1,
    );
  }

  late final _isc_decode_sql_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_DATE>,
              ffi.Pointer<ffi.Void>)>>('isc_decode_sql_date');
  late final _isc_decode_sql_date = _isc_decode_sql_datePtr.asFunction<
      void Function(ffi.Pointer<ISC_DATE>, ffi.Pointer<ffi.Void>)>();

  void isc_decode_sql_time(
    ffi.Pointer<ISC_TIME> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _isc_decode_sql_time(
      arg0,
      arg1,
    );
  }

  late final _isc_decode_sql_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_TIME>,
              ffi.Pointer<ffi.Void>)>>('isc_decode_sql_time');
  late final _isc_decode_sql_time = _isc_decode_sql_timePtr.asFunction<
      void Function(ffi.Pointer<ISC_TIME>, ffi.Pointer<ffi.Void>)>();

  void isc_decode_timestamp(
    ffi.Pointer<ISC_TIMESTAMP> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _isc_decode_timestamp(
      arg0,
      arg1,
    );
  }

  late final _isc_decode_timestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_TIMESTAMP>,
              ffi.Pointer<ffi.Void>)>>('isc_decode_timestamp');
  late final _isc_decode_timestamp = _isc_decode_timestampPtr.asFunction<
      void Function(ffi.Pointer<ISC_TIMESTAMP>, ffi.Pointer<ffi.Void>)>();

  int isc_detach_database(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
  ) {
    return _isc_detach_database(
      arg0,
      arg1,
    );
  }

  late final _isc_detach_databasePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>)>>('isc_detach_database');
  late final _isc_detach_database = _isc_detach_databasePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>)>();

  int isc_drop_database(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
  ) {
    return _isc_drop_database(
      arg0,
      arg1,
    );
  }

  late final _isc_drop_databasePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>)>>('isc_drop_database');
  late final _isc_drop_database = _isc_drop_databasePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>)>();

  int isc_dsql_allocate_statement(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
  ) {
    return _isc_dsql_allocate_statement(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_dsql_allocate_statementPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_stmt_handle>)>>('isc_dsql_allocate_statement');
  late final _isc_dsql_allocate_statement =
      _isc_dsql_allocate_statementPtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_stmt_handle>)>();

  int isc_dsql_alloc_statement2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
  ) {
    return _isc_dsql_alloc_statement2(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_dsql_alloc_statement2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_stmt_handle>)>>('isc_dsql_alloc_statement2');
  late final _isc_dsql_alloc_statement2 =
      _isc_dsql_alloc_statement2Ptr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_stmt_handle>)>();

  int isc_dsql_describe(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_dsql_describe(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_dsql_describePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_describe');
  late final _isc_dsql_describe = _isc_dsql_describePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_describe_bind(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_dsql_describe_bind(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_dsql_describe_bindPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_describe_bind');
  late final _isc_dsql_describe_bind = _isc_dsql_describe_bindPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_exec_immed2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<XSQLDA> arg6,
    ffi.Pointer<XSQLDA> arg7,
  ) {
    return _isc_dsql_exec_immed2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _isc_dsql_exec_immed2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_exec_immed2');
  late final _isc_dsql_exec_immed2 = _isc_dsql_exec_immed2Ptr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<XSQLDA>,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_execute(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
  ) {
    return _isc_dsql_execute(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_dsql_executePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_execute');
  late final _isc_dsql_execute = _isc_dsql_executePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_stmt_handle>, int, ffi.Pointer<XSQLDA>)>();

  int isc_dsql_execute2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
    ffi.Pointer<XSQLDA> arg5,
  ) {
    return _isc_dsql_execute2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_dsql_execute2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_execute2');
  late final _isc_dsql_execute2 = _isc_dsql_execute2Ptr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_stmt_handle>,
          int,
          ffi.Pointer<XSQLDA>,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_execute_immediate(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<XSQLDA> arg6,
  ) {
    return _isc_dsql_execute_immediate(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_dsql_execute_immediatePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_execute_immediate');
  late final _isc_dsql_execute_immediate =
      _isc_dsql_execute_immediatePtr.asFunction<
          int Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              int,
              ffi.Pointer<ISC_SCHAR>,
              int,
              ffi.Pointer<XSQLDA>)>();

  int isc_dsql_fetch(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_dsql_fetch(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_dsql_fetchPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_fetch');
  late final _isc_dsql_fetch = _isc_dsql_fetchPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_finish(
    ffi.Pointer<isc_db_handle> arg0,
  ) {
    return _isc_dsql_finish(
      arg0,
    );
  }

  late final _isc_dsql_finishPtr = _lookup<
          ffi.NativeFunction<ISC_STATUS Function(ffi.Pointer<isc_db_handle>)>>(
      'isc_dsql_finish');
  late final _isc_dsql_finish = _isc_dsql_finishPtr
      .asFunction<int Function(ffi.Pointer<isc_db_handle>)>();

  int isc_dsql_free_statement(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
  ) {
    return _isc_dsql_free_statement(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_dsql_free_statementPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16)>>('isc_dsql_free_statement');
  late final _isc_dsql_free_statement = _isc_dsql_free_statementPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int)>();

  int isc_dsql_insert(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_dsql_insert(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_dsql_insertPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_insert');
  late final _isc_dsql_insert = _isc_dsql_insertPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_prepare(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<XSQLDA> arg6,
  ) {
    return _isc_dsql_prepare(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_dsql_preparePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_dsql_prepare');
  late final _isc_dsql_prepare = _isc_dsql_preparePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_stmt_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<XSQLDA>)>();

  int isc_dsql_set_cursor_name(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
  ) {
    return _isc_dsql_set_cursor_name(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_dsql_set_cursor_namePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16)>>('isc_dsql_set_cursor_name');
  late final _isc_dsql_set_cursor_name =
      _isc_dsql_set_cursor_namePtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>,
              ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_dsql_sql_info(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
  ) {
    return _isc_dsql_sql_info(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_dsql_sql_infoPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_sql_info');
  late final _isc_dsql_sql_info = _isc_dsql_sql_infoPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ISC_SCHAR>)>();

  void isc_encode_date(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ISC_QUAD> arg1,
  ) {
    return _isc_encode_date(
      arg0,
      arg1,
    );
  }

  late final _isc_encode_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_QUAD>)>>('isc_encode_date');
  late final _isc_encode_date = _isc_encode_datePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ISC_QUAD>)>();

  void isc_encode_sql_date(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ISC_DATE> arg1,
  ) {
    return _isc_encode_sql_date(
      arg0,
      arg1,
    );
  }

  late final _isc_encode_sql_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_DATE>)>>('isc_encode_sql_date');
  late final _isc_encode_sql_date = _isc_encode_sql_datePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ISC_DATE>)>();

  void isc_encode_sql_time(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ISC_TIME> arg1,
  ) {
    return _isc_encode_sql_time(
      arg0,
      arg1,
    );
  }

  late final _isc_encode_sql_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_TIME>)>>('isc_encode_sql_time');
  late final _isc_encode_sql_time = _isc_encode_sql_timePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ISC_TIME>)>();

  void isc_encode_timestamp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ISC_TIMESTAMP> arg1,
  ) {
    return _isc_encode_timestamp(
      arg0,
      arg1,
    );
  }

  late final _isc_encode_timestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_TIMESTAMP>)>>('isc_encode_timestamp');
  late final _isc_encode_timestamp = _isc_encode_timestampPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ISC_TIMESTAMP>)>();

  int isc_event_block(
    ffi.Pointer<ffi.Pointer<ISC_UCHAR>> arg0,
    ffi.Pointer<ffi.Pointer<ISC_UCHAR>> arg1,
    int arg2,
  ) {
    return _isc_event_block(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_event_blockPtr = _lookup<
      ffi.NativeFunction<
          ISC_LONG Function(
              ffi.Pointer<ffi.Pointer<ISC_UCHAR>>,
              ffi.Pointer<ffi.Pointer<ISC_UCHAR>>,
              ISC_USHORT)>>('isc_event_block');
  late final _isc_event_block = _isc_event_blockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ISC_UCHAR>>,
          ffi.Pointer<ffi.Pointer<ISC_UCHAR>>, int)>();

  int isc_event_block_a(
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg0,
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg3,
  ) {
    return _isc_event_block_a(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_event_block_aPtr = _lookup<
      ffi.NativeFunction<
          ISC_USHORT Function(
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ISC_USHORT,
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>)>>('isc_event_block_a');
  late final _isc_event_block_a = _isc_event_block_aPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
          int,
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>)>();

  void isc_event_block_s(
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg0,
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg3,
    ffi.Pointer<ISC_USHORT> arg4,
  ) {
    return _isc_event_block_s(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_event_block_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ISC_USHORT,
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ffi.Pointer<ISC_USHORT>)>>('isc_event_block_s');
  late final _isc_event_block_s = _isc_event_block_sPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
          int,
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
          ffi.Pointer<ISC_USHORT>)>();

  void isc_event_counts(
    ffi.Pointer<ISC_ULONG> arg0,
    int arg1,
    ffi.Pointer<ISC_UCHAR> arg2,
    ffi.Pointer<ISC_UCHAR> arg3,
  ) {
    return _isc_event_counts(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_event_countsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ISC_ULONG>,
              ffi.Int16,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_UCHAR>)>>('isc_event_counts');
  late final _isc_event_counts = _isc_event_countsPtr.asFunction<
      void Function(ffi.Pointer<ISC_ULONG>, int, ffi.Pointer<ISC_UCHAR>,
          ffi.Pointer<ISC_UCHAR>)>();

  void isc_expand_dpb(
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg0,
    ffi.Pointer<ffi.Int16> arg1,
  ) {
    return _isc_expand_dpb(
      arg0,
      arg1,
    );
  }

  late final _isc_expand_dpbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ffi.Pointer<ffi.Int16>)>>('isc_expand_dpb');
  late final _isc_expand_dpb = _isc_expand_dpbPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ISC_SCHAR>>, ffi.Pointer<ffi.Int16>)>();

  int isc_modify_dpb(
    ffi.Pointer<ffi.Pointer<ISC_SCHAR>> arg0,
    ffi.Pointer<ffi.Int16> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
  ) {
    return _isc_modify_dpb(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_modify_dpbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ISC_SCHAR>>,
              ffi.Pointer<ffi.Int16>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16)>>('isc_modify_dpb');
  late final _isc_modify_dpb = _isc_modify_dpbPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ISC_SCHAR>>, ffi.Pointer<ffi.Int16>,
          int, ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_free(
    ffi.Pointer<ISC_SCHAR> arg0,
  ) {
    return _isc_free(
      arg0,
    );
  }

  late final _isc_freePtr =
      _lookup<ffi.NativeFunction<ISC_LONG Function(ffi.Pointer<ISC_SCHAR>)>>(
          'isc_free');
  late final _isc_free =
      _isc_freePtr.asFunction<int Function(ffi.Pointer<ISC_SCHAR>)>();

  int isc_get_segment(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_blob_handle> arg1,
    ffi.Pointer<ffi.Uint16> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_get_segment(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_get_segmentPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Pointer<ffi.Uint16>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_get_segment');
  late final _isc_get_segment = _isc_get_segmentPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_blob_handle>,
          ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_get_slice(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_QUAD> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
    int arg6,
    ffi.Pointer<ISC_LONG> arg7,
    int arg8,
    ffi.Pointer<ffi.Void> arg9,
    ffi.Pointer<ISC_LONG> arg10,
  ) {
    return _isc_get_slice(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _isc_get_slicePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_QUAD>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_LONG>,
              ISC_LONG,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ISC_LONG>)>>('isc_get_slice');
  late final _isc_get_slice = _isc_get_slicePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_QUAD>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_LONG>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ISC_LONG>)>();

  int isc_interprete(
    ffi.Pointer<ISC_SCHAR> arg0,
    ffi.Pointer<ffi.Pointer<ISC_STATUS>> arg1,
  ) {
    return _isc_interprete(
      arg0,
      arg1,
    );
  }

  late final _isc_interpretePtr = _lookup<
      ffi.NativeFunction<
          ISC_LONG Function(ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ffi.Pointer<ISC_STATUS>>)>>('isc_interprete');
  late final _isc_interprete = _isc_interpretePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_SCHAR>, ffi.Pointer<ffi.Pointer<ISC_STATUS>>)>();

  int fb_interpret(
    ffi.Pointer<ISC_SCHAR> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ISC_STATUS>> arg2,
  ) {
    return _fb_interpret(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fb_interpretPtr = _lookup<
      ffi.NativeFunction<
          ISC_LONG Function(ffi.Pointer<ISC_SCHAR>, ffi.Uint32,
              ffi.Pointer<ffi.Pointer<ISC_STATUS>>)>>('fb_interpret');
  late final _fb_interpret = _fb_interpretPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ffi.Pointer<ISC_STATUS>>)>();

  int isc_open_blob(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<isc_blob_handle> arg3,
    ffi.Pointer<ISC_QUAD> arg4,
  ) {
    return _isc_open_blob(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_open_blobPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Pointer<ISC_QUAD>)>>('isc_open_blob');
  late final _isc_open_blob = _isc_open_blobPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_blob_handle>,
          ffi.Pointer<ISC_QUAD>)>();

  int isc_open_blob2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<isc_blob_handle> arg3,
    ffi.Pointer<ISC_QUAD> arg4,
    int arg5,
    ffi.Pointer<ISC_UCHAR> arg6,
  ) {
    return _isc_open_blob2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_open_blob2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Pointer<ISC_QUAD>,
              ISC_USHORT,
              ffi.Pointer<ISC_UCHAR>)>>('isc_open_blob2');
  late final _isc_open_blob2 = _isc_open_blob2Ptr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_blob_handle>,
          ffi.Pointer<ISC_QUAD>,
          int,
          ffi.Pointer<ISC_UCHAR>)>();

  int isc_prepare_transaction2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_UCHAR> arg3,
  ) {
    return _isc_prepare_transaction2(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_prepare_transaction2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ISC_USHORT,
              ffi.Pointer<ISC_UCHAR>)>>('isc_prepare_transaction2');
  late final _isc_prepare_transaction2 =
      _isc_prepare_transaction2Ptr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>, int,
              ffi.Pointer<ISC_UCHAR>)>();

  void isc_print_sqlerror(
    int arg0,
    ffi.Pointer<ISC_STATUS> arg1,
  ) {
    return _isc_print_sqlerror(
      arg0,
      arg1,
    );
  }

  late final _isc_print_sqlerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ISC_SHORT, ffi.Pointer<ISC_STATUS>)>>('isc_print_sqlerror');
  late final _isc_print_sqlerror = _isc_print_sqlerrorPtr
      .asFunction<void Function(int, ffi.Pointer<ISC_STATUS>)>();

  int isc_print_status(
    ffi.Pointer<ISC_STATUS> arg0,
  ) {
    return _isc_print_status(
      arg0,
    );
  }

  late final _isc_print_statusPtr =
      _lookup<ffi.NativeFunction<ISC_STATUS Function(ffi.Pointer<ISC_STATUS>)>>(
          'isc_print_status');
  late final _isc_print_status =
      _isc_print_statusPtr.asFunction<int Function(ffi.Pointer<ISC_STATUS>)>();

  int isc_put_segment(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_blob_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _isc_put_segment(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_put_segmentPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_put_segment');
  late final _isc_put_segment = _isc_put_segmentPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_blob_handle>, int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_put_slice(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_QUAD> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
    int arg6,
    ffi.Pointer<ISC_LONG> arg7,
    int arg8,
    ffi.Pointer<ffi.Void> arg9,
  ) {
    return _isc_put_slice(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _isc_put_slicePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_QUAD>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_LONG>,
              ISC_LONG,
              ffi.Pointer<ffi.Void>)>>('isc_put_slice');
  late final _isc_put_slice = _isc_put_slicePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_QUAD>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_LONG>,
          int,
          ffi.Pointer<ffi.Void>)>();

  int isc_que_events(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<ISC_LONG> arg2,
    int arg3,
    ffi.Pointer<ISC_UCHAR> arg4,
    ISC_EVENT_CALLBACK arg5,
    ffi.Pointer<ffi.Void> arg6,
  ) {
    return _isc_que_events(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_que_eventsPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<ISC_LONG>,
              ffi.Int16,
              ffi.Pointer<ISC_UCHAR>,
              ISC_EVENT_CALLBACK,
              ffi.Pointer<ffi.Void>)>>('isc_que_events');
  late final _isc_que_events = _isc_que_eventsPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<ISC_LONG>,
          int,
          ffi.Pointer<ISC_UCHAR>,
          ISC_EVENT_CALLBACK,
          ffi.Pointer<ffi.Void>)>();

  int isc_rollback_retaining(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
  ) {
    return _isc_rollback_retaining(
      arg0,
      arg1,
    );
  }

  late final _isc_rollback_retainingPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>)>>('isc_rollback_retaining');
  late final _isc_rollback_retaining = _isc_rollback_retainingPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>)>();

  int isc_rollback_transaction(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
  ) {
    return _isc_rollback_transaction(
      arg0,
      arg1,
    );
  }

  late final _isc_rollback_transactionPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>)>>('isc_rollback_transaction');
  late final _isc_rollback_transaction =
      _isc_rollback_transactionPtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>)>();

  int isc_start_multiple(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _isc_start_multiple(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_start_multiplePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Int16,
              ffi.Pointer<ffi.Void>)>>('isc_start_multiple');
  late final _isc_start_multiple = _isc_start_multiplePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>, int,
          ffi.Pointer<ffi.Void>)>();

  int isc_start_transaction(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    int arg2,
    ffi.Pointer<isc_db_handle> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5
  ) {
    return _isc_start_transaction(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_start_transactionPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>, ffi.Int16,
              ffi.Pointer<isc_db_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>
   )>>('isc_start_transaction');
  late final _isc_start_transaction = _isc_start_transactionPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>, int,
          ffi.Pointer<isc_db_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>
          )>();

  int fb_disconnect_transaction(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
  ) {
    return _fb_disconnect_transaction(
      arg0,
      arg1,
    );
  }

  late final _fb_disconnect_transactionPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>)>>('fb_disconnect_transaction');
  late final _fb_disconnect_transaction =
      _fb_disconnect_transactionPtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>)>();

  int isc_sqlcode(
    ffi.Pointer<ISC_STATUS> arg0,
  ) {
    return _isc_sqlcode(
      arg0,
    );
  }

  late final _isc_sqlcodePtr =
      _lookup<ffi.NativeFunction<ISC_LONG Function(ffi.Pointer<ISC_STATUS>)>>(
          'isc_sqlcode');
  late final _isc_sqlcode =
      _isc_sqlcodePtr.asFunction<int Function(ffi.Pointer<ISC_STATUS>)>();

  void isc_sqlcode_s(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_ULONG> arg1,
  ) {
    return _isc_sqlcode_s(
      arg0,
      arg1,
    );
  }

  late final _isc_sqlcode_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_ULONG>)>>('isc_sqlcode_s');
  late final _isc_sqlcode_s = _isc_sqlcode_sPtr.asFunction<
      void Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_ULONG>)>();

  void fb_sqlstate(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ISC_STATUS> arg1,
  ) {
    return _fb_sqlstate(
      arg0,
      arg1,
    );
  }

  late final _fb_sqlstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ISC_STATUS>)>>('fb_sqlstate');
  late final _fb_sqlstate = _fb_sqlstatePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ISC_STATUS>)>();

  void isc_sql_interprete(
    int arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
  ) {
    return _isc_sql_interprete(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_sql_interpretePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int16, ffi.Pointer<ISC_SCHAR>,
              ffi.Int16)>>('isc_sql_interprete');
  late final _isc_sql_interprete = _isc_sql_interpretePtr
      .asFunction<void Function(int, ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_transaction_info(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
  ) {
    return _isc_transaction_info(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_transaction_infoPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_transaction_info');
  late final _isc_transaction_info = _isc_transaction_infoPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>, int,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_transact_request(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<ISC_SCHAR> arg6,
    int arg7,
    ffi.Pointer<ISC_SCHAR> arg8,
  ) {
    return _isc_transact_request(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _isc_transact_requestPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_transact_request');
  late final _isc_transact_request = _isc_transact_requestPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_vax_integer(
    ffi.Pointer<ISC_SCHAR> arg0,
    int arg1,
  ) {
    return _isc_vax_integer(
      arg0,
      arg1,
    );
  }

  late final _isc_vax_integerPtr = _lookup<
      ffi.NativeFunction<
          ISC_LONG Function(
              ffi.Pointer<ISC_SCHAR>, ffi.Int16)>>('isc_vax_integer');
  late final _isc_vax_integer = _isc_vax_integerPtr
      .asFunction<int Function(ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_portable_integer(
    ffi.Pointer<ISC_UCHAR> arg0,
    int arg1,
  ) {
    return _isc_portable_integer(
      arg0,
      arg1,
    );
  }

  late final _isc_portable_integerPtr = _lookup<
      ffi.NativeFunction<
          ISC_INT64 Function(
              ffi.Pointer<ISC_UCHAR>, ffi.Int16)>>('isc_portable_integer');
  late final _isc_portable_integer = _isc_portable_integerPtr
      .asFunction<int Function(ffi.Pointer<ISC_UCHAR>, int)>();

  int isc_add_user(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<USER_SEC_DATA> arg1,
  ) {
    return _isc_add_user(
      arg0,
      arg1,
    );
  }

  late final _isc_add_userPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<USER_SEC_DATA>)>>('isc_add_user');
  late final _isc_add_user = _isc_add_userPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<USER_SEC_DATA>)>();

  int isc_delete_user(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<USER_SEC_DATA> arg1,
  ) {
    return _isc_delete_user(
      arg0,
      arg1,
    );
  }

  late final _isc_delete_userPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<USER_SEC_DATA>)>>('isc_delete_user');
  late final _isc_delete_user = _isc_delete_userPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<USER_SEC_DATA>)>();

  int isc_modify_user(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<USER_SEC_DATA> arg1,
  ) {
    return _isc_modify_user(
      arg0,
      arg1,
    );
  }

  late final _isc_modify_userPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<USER_SEC_DATA>)>>('isc_modify_user');
  late final _isc_modify_user = _isc_modify_userPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<USER_SEC_DATA>)>();

  /// /
  int isc_compile_request(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_req_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_compile_request(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_compile_requestPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_req_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_compile_request');
  late final _isc_compile_request = _isc_compile_requestPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_req_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_compile_request2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_req_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_compile_request2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_compile_request2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_req_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_compile_request2');
  late final _isc_compile_request2 = _isc_compile_request2Ptr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_req_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_ddl(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_ddl(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_ddlPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_ddl');
  late final _isc_ddl = _isc_ddlPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_prepare_transaction(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
  ) {
    return _isc_prepare_transaction(
      arg0,
      arg1,
    );
  }

  late final _isc_prepare_transactionPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>)>>('isc_prepare_transaction');
  late final _isc_prepare_transaction = _isc_prepare_transactionPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>)>();

  int isc_receive(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_req_handle> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
    int arg5,
  ) {
    return _isc_receive(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_receivePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_req_handle>,
              ffi.Int16,
              ffi.Int16,
              ffi.Pointer<ffi.Void>,
              ffi.Int16)>>('isc_receive');
  late final _isc_receive = _isc_receivePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_req_handle>, int,
          int, ffi.Pointer<ffi.Void>, int)>();

  int isc_reconnect_transaction(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_reconnect_transaction(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_reconnect_transactionPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_reconnect_transaction');
  late final _isc_reconnect_transaction =
      _isc_reconnect_transactionPtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_release_request(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_req_handle> arg1,
  ) {
    return _isc_release_request(
      arg0,
      arg1,
    );
  }

  late final _isc_release_requestPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_req_handle>)>>('isc_release_request');
  late final _isc_release_request = _isc_release_requestPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_req_handle>)>();

  int isc_request_info(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_req_handle> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<ISC_SCHAR> arg6,
  ) {
    return _isc_request_info(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_request_infoPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_req_handle>,
              ffi.Int16,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Int16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_request_info');
  late final _isc_request_info = _isc_request_infoPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_req_handle>, int,
          int, ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_seek_blob(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_blob_handle> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ISC_LONG> arg4,
  ) {
    return _isc_seek_blob(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_seek_blobPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_blob_handle>,
              ffi.Int16,
              ISC_LONG,
              ffi.Pointer<ISC_LONG>)>>('isc_seek_blob');
  late final _isc_seek_blob = _isc_seek_blobPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_blob_handle>, int,
          int, ffi.Pointer<ISC_LONG>)>();

  int isc_send(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_req_handle> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
    int arg5,
  ) {
    return _isc_send(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_sendPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_req_handle>,
              ffi.Int16,
              ffi.Int16,
              ffi.Pointer<ffi.Void>,
              ffi.Int16)>>('isc_send');
  late final _isc_send = _isc_sendPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_req_handle>, int,
          int, ffi.Pointer<ffi.Void>, int)>();

  int isc_start_and_send(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_req_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Void> arg5,
    int arg6,
  ) {
    return _isc_start_and_send(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_start_and_sendPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_req_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Int16,
              ffi.Int16,
              ffi.Pointer<ffi.Void>,
              ffi.Int16)>>('isc_start_and_send');
  late final _isc_start_and_send = _isc_start_and_sendPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_req_handle>,
          ffi.Pointer<isc_tr_handle>, int, int, ffi.Pointer<ffi.Void>, int)>();

  int isc_start_request(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_req_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
  ) {
    return _isc_start_request(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_start_requestPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_req_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Int16)>>('isc_start_request');
  late final _isc_start_request = _isc_start_requestPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_req_handle>,
          ffi.Pointer<isc_tr_handle>, int)>();

  int isc_unwind_request(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    int arg2,
  ) {
    return _isc_unwind_request(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_unwind_requestPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>, ffi.Int16)>>('isc_unwind_request');
  late final _isc_unwind_request = _isc_unwind_requestPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>, int)>();

  int isc_wait_for_event(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_UCHAR> arg3,
    ffi.Pointer<ISC_UCHAR> arg4,
  ) {
    return _isc_wait_for_event(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_wait_for_eventPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Int16,
              ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_UCHAR>)>>('isc_wait_for_event');
  late final _isc_wait_for_event = _isc_wait_for_eventPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>, int,
          ffi.Pointer<ISC_UCHAR>, ffi.Pointer<ISC_UCHAR>)>();

  /// /
  int isc_close(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
  ) {
    return _isc_close(
      arg0,
      arg1,
    );
  }

  late final _isc_closePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>)>>('isc_close');
  late final _isc_close = _isc_closePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>)>();

  int isc_declare(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
  ) {
    return _isc_declare(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_declarePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_SCHAR>)>>('isc_declare');
  late final _isc_declare = _isc_declarePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_describe(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    ffi.Pointer<XSQLDA> arg2,
  ) {
    return _isc_describe(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_describePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<XSQLDA>)>>('isc_describe');
  late final _isc_describe = _isc_describePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<XSQLDA>)>();

  int isc_describe_bind(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    ffi.Pointer<XSQLDA> arg2,
  ) {
    return _isc_describe_bind(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_describe_bindPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<XSQLDA>)>>('isc_describe_bind');
  late final _isc_describe_bind = _isc_describe_bindPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<XSQLDA>)>();

  int isc_execute(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_execute(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_executePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<XSQLDA>)>>('isc_execute');
  late final _isc_execute = _isc_executePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>, ffi.Pointer<XSQLDA>)>();

  int isc_execute_immediate(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ffi.Int16> arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_execute_immediate(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_execute_immediatePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ISC_SCHAR>)>>('isc_execute_immediate');
  late final _isc_execute_immediate = _isc_execute_immediatePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_fetch(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    ffi.Pointer<XSQLDA> arg2,
  ) {
    return _isc_fetch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_fetchPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<XSQLDA>)>>('isc_fetch');
  late final _isc_fetch = _isc_fetchPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<XSQLDA>)>();

  int isc_open(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_open(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_openPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<XSQLDA>)>>('isc_open');
  late final _isc_open = _isc_openPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>, ffi.Pointer<XSQLDA>)>();

  int isc_prepare(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    ffi.Pointer<ffi.Int16> arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
    ffi.Pointer<XSQLDA> arg6,
  ) {
    return _isc_prepare(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_preparePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ffi.Int16>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<XSQLDA>)>>('isc_prepare');
  late final _isc_prepare = _isc_preparePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ffi.Int16>,
          ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<XSQLDA>)>();

  /// /
  int isc_dsql_execute_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ISC_SCHAR> arg7,
  ) {
    return _isc_dsql_execute_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _isc_dsql_execute_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_execute_m');
  late final _isc_dsql_execute_m = _isc_dsql_execute_mPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_stmt_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_execute2_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ISC_SCHAR> arg7,
    int arg8,
    ffi.Pointer<ISC_SCHAR> arg9,
    int arg10,
    int arg11,
    ffi.Pointer<ISC_SCHAR> arg12,
  ) {
    return _isc_dsql_execute2_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
    );
  }

  late final _isc_dsql_execute2_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_execute2_m');
  late final _isc_dsql_execute2_m = _isc_dsql_execute2_mPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_stmt_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_execute_immediate_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ISC_SCHAR> arg7,
    int arg8,
    int arg9,
    ffi.Pointer<ISC_SCHAR> arg10,
  ) {
    return _isc_dsql_execute_immediate_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  late final _isc_dsql_execute_immediate_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_execute_immediate_m');
  late final _isc_dsql_execute_immediate_m =
      _isc_dsql_execute_immediate_mPtr.asFunction<
          int Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              int,
              ffi.Pointer<ISC_SCHAR>,
              int,
              int,
              ffi.Pointer<ISC_SCHAR>,
              int,
              int,
              ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_exec_immed3_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ISC_SCHAR> arg7,
    int arg8,
    int arg9,
    ffi.Pointer<ISC_SCHAR> arg10,
    int arg11,
    ffi.Pointer<ISC_SCHAR> arg12,
    int arg13,
    int arg14,
    ffi.Pointer<ISC_SCHAR> arg15,
  ) {
    return _isc_dsql_exec_immed3_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
      arg13,
      arg14,
      arg15,
    );
  }

  late final _isc_dsql_exec_immed3_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_exec_immed3_m');
  late final _isc_dsql_exec_immed3_m = _isc_dsql_exec_immed3_mPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_fetch_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ISC_SCHAR> arg6,
  ) {
    return _isc_dsql_fetch_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_dsql_fetch_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_fetch_m');
  late final _isc_dsql_fetch_m = _isc_dsql_fetch_mPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<ISC_SCHAR>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_insert_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_stmt_handle> arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ISC_SCHAR> arg6,
  ) {
    return _isc_dsql_insert_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_dsql_insert_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_insert_m');
  late final _isc_dsql_insert_m = _isc_dsql_insert_mPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_stmt_handle>, int,
          ffi.Pointer<ISC_SCHAR>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_prepare_m(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<isc_stmt_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ISC_SCHAR> arg7,
    int arg8,
    ffi.Pointer<ISC_SCHAR> arg9,
  ) {
    return _isc_dsql_prepare_m(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  late final _isc_dsql_prepare_mPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<isc_stmt_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_prepare_m');
  late final _isc_dsql_prepare_m = _isc_dsql_prepare_mPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<isc_stmt_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_dsql_release(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
  ) {
    return _isc_dsql_release(
      arg0,
      arg1,
    );
  }

  late final _isc_dsql_releasePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_SCHAR>)>>('isc_dsql_release');
  late final _isc_dsql_release = _isc_dsql_releasePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>)>();

  int isc_embed_dsql_close(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
  ) {
    return _isc_embed_dsql_close(
      arg0,
      arg1,
    );
  }

  late final _isc_embed_dsql_closePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_SCHAR>)>>('isc_embed_dsql_close');
  late final _isc_embed_dsql_close = _isc_embed_dsql_closePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>)>();

  int isc_embed_dsql_declare(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
  ) {
    return _isc_embed_dsql_declare(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_embed_dsql_declarePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<ISC_SCHAR>)>>('isc_embed_dsql_declare');
  late final _isc_embed_dsql_declare = _isc_embed_dsql_declarePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_embed_dsql_describe(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_embed_dsql_describe(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_embed_dsql_describePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16, ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_describe');
  late final _isc_embed_dsql_describe = _isc_embed_dsql_describePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_describe_bind(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_embed_dsql_describe_bind(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_embed_dsql_describe_bindPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_describe_bind');
  late final _isc_embed_dsql_describe_bind =
      _isc_embed_dsql_describe_bindPtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>, int,
              ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_execute(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
  ) {
    return _isc_embed_dsql_execute(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_embed_dsql_executePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_execute');
  late final _isc_embed_dsql_execute = _isc_embed_dsql_executePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_execute2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
    ffi.Pointer<XSQLDA> arg5,
  ) {
    return _isc_embed_dsql_execute2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_embed_dsql_execute2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_execute2');
  late final _isc_embed_dsql_execute2 = _isc_embed_dsql_execute2Ptr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<XSQLDA>,
          ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_execute_immed(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<XSQLDA> arg6,
  ) {
    return _isc_embed_dsql_execute_immed(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _isc_embed_dsql_execute_immedPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_execute_immed');
  late final _isc_embed_dsql_execute_immed =
      _isc_embed_dsql_execute_immedPtr.asFunction<
          int Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              int,
              ffi.Pointer<ISC_SCHAR>,
              int,
              ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_fetch(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_embed_dsql_fetch(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_embed_dsql_fetchPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16, ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_fetch');
  late final _isc_embed_dsql_fetch = _isc_embed_dsql_fetchPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_fetch_a(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
  ) {
    return _isc_embed_dsql_fetch_a(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_embed_dsql_fetch_aPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ISC_SCHAR>,
              ISC_USHORT,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_fetch_a');
  late final _isc_embed_dsql_fetch_a = _isc_embed_dsql_fetch_aPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<XSQLDA>)>();

  void isc_embed_dsql_length(
    ffi.Pointer<ISC_UCHAR> arg0,
    ffi.Pointer<ISC_USHORT> arg1,
  ) {
    return _isc_embed_dsql_length(
      arg0,
      arg1,
    );
  }

  late final _isc_embed_dsql_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_UCHAR>,
              ffi.Pointer<ISC_USHORT>)>>('isc_embed_dsql_length');
  late final _isc_embed_dsql_length = _isc_embed_dsql_lengthPtr.asFunction<
      void Function(ffi.Pointer<ISC_UCHAR>, ffi.Pointer<ISC_USHORT>)>();

  int isc_embed_dsql_open(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
  ) {
    return _isc_embed_dsql_open(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_embed_dsql_openPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_open');
  late final _isc_embed_dsql_open = _isc_embed_dsql_openPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_open2(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
    ffi.Pointer<XSQLDA> arg4,
    ffi.Pointer<XSQLDA> arg5,
  ) {
    return _isc_embed_dsql_open2(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_embed_dsql_open2Ptr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_open2');
  late final _isc_embed_dsql_open2 = _isc_embed_dsql_open2Ptr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<XSQLDA>,
          ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_insert(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
    ffi.Pointer<XSQLDA> arg3,
  ) {
    return _isc_embed_dsql_insert(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_embed_dsql_insertPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16, ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_insert');
  late final _isc_embed_dsql_insert = _isc_embed_dsql_insertPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>, int,
          ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_prepare(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<isc_tr_handle> arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
    int arg6,
    ffi.Pointer<XSQLDA> arg7,
  ) {
    return _isc_embed_dsql_prepare(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _isc_embed_dsql_preparePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<XSQLDA>)>>('isc_embed_dsql_prepare');
  late final _isc_embed_dsql_prepare = _isc_embed_dsql_preparePtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_db_handle>,
          ffi.Pointer<isc_tr_handle>,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<XSQLDA>)>();

  int isc_embed_dsql_release(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
  ) {
    return _isc_embed_dsql_release(
      arg0,
      arg1,
    );
  }

  late final _isc_embed_dsql_releasePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ISC_SCHAR>)>>('isc_embed_dsql_release');
  late final _isc_embed_dsql_release = _isc_embed_dsql_releasePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ISC_SCHAR>)>();

  /// /
  FB_BLOB_STREAM BLOB_open(
    int arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
  ) {
    return _BLOB_open(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _BLOB_openPtr = _lookup<
      ffi.NativeFunction<
          FB_BLOB_STREAM Function(isc_blob_handle, ffi.Pointer<ISC_SCHAR>,
              ffi.Int32)>>('BLOB_open');
  late final _BLOB_open = _BLOB_openPtr.asFunction<
      FB_BLOB_STREAM Function(int, ffi.Pointer<ISC_SCHAR>, int)>();

  int BLOB_put(
    int arg0,
    FB_BLOB_STREAM arg1,
  ) {
    return _BLOB_put(
      arg0,
      arg1,
    );
  }

  late final _BLOB_putPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ISC_SCHAR, FB_BLOB_STREAM)>>(
      'BLOB_put');
  late final _BLOB_put =
      _BLOB_putPtr.asFunction<int Function(int, FB_BLOB_STREAM)>();

  int BLOB_close(
    FB_BLOB_STREAM arg0,
  ) {
    return _BLOB_close(
      arg0,
    );
  }

  late final _BLOB_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FB_BLOB_STREAM)>>(
          'BLOB_close');
  late final _BLOB_close =
      _BLOB_closePtr.asFunction<int Function(FB_BLOB_STREAM)>();

  int BLOB_get(
    FB_BLOB_STREAM arg0,
  ) {
    return _BLOB_get(
      arg0,
    );
  }

  late final _BLOB_getPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(FB_BLOB_STREAM)>>(
          'BLOB_get');
  late final _BLOB_get =
      _BLOB_getPtr.asFunction<int Function(FB_BLOB_STREAM)>();

  int BLOB_display(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _BLOB_display(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BLOB_displayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('BLOB_display');
  late final _BLOB_display = _BLOB_displayPtr.asFunction<
      int Function(ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int BLOB_dump(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _BLOB_dump(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BLOB_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('BLOB_dump');
  late final _BLOB_dump = _BLOB_dumpPtr.asFunction<
      int Function(ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int BLOB_edit(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _BLOB_edit(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BLOB_editPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('BLOB_edit');
  late final _BLOB_edit = _BLOB_editPtr.asFunction<
      int Function(ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int BLOB_load(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _BLOB_load(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BLOB_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('BLOB_load');
  late final _BLOB_load = _BLOB_loadPtr.asFunction<
      int Function(ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int BLOB_text_dump(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _BLOB_text_dump(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BLOB_text_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('BLOB_text_dump');
  late final _BLOB_text_dump = _BLOB_text_dumpPtr.asFunction<
      int Function(ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  int BLOB_text_load(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _BLOB_text_load(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BLOB_text_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('BLOB_text_load');
  late final _BLOB_text_load = _BLOB_text_loadPtr.asFunction<
      int Function(ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  FB_BLOB_STREAM Bopen(
    ffi.Pointer<ISC_QUAD> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ISC_SCHAR> arg3,
  ) {
    return _Bopen(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BopenPtr = _lookup<
      ffi.NativeFunction<
          FB_BLOB_STREAM Function(ffi.Pointer<ISC_QUAD>, isc_db_handle,
              isc_tr_handle, ffi.Pointer<ISC_SCHAR>)>>('Bopen');
  late final _Bopen = _BopenPtr.asFunction<
      FB_BLOB_STREAM Function(
          ffi.Pointer<ISC_QUAD>, int, int, ffi.Pointer<ISC_SCHAR>)>();

  /// /
  int isc_ftof(
    ffi.Pointer<ISC_SCHAR> arg0,
    int arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    int arg3,
  ) {
    return _isc_ftof(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_ftofPtr = _lookup<
      ffi.NativeFunction<
          ISC_LONG Function(ffi.Pointer<ISC_SCHAR>, ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>, ffi.Uint16)>>('isc_ftof');
  late final _isc_ftof = _isc_ftofPtr.asFunction<
      int Function(ffi.Pointer<ISC_SCHAR>, int, ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_print_blr(
    ffi.Pointer<ISC_SCHAR> arg0,
    ISC_PRINT_CALLBACK arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _isc_print_blr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _isc_print_blrPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_SCHAR>, ISC_PRINT_CALLBACK,
              ffi.Pointer<ffi.Void>, ffi.Int16)>>('isc_print_blr');
  late final _isc_print_blr = _isc_print_blrPtr.asFunction<
      int Function(ffi.Pointer<ISC_SCHAR>, ISC_PRINT_CALLBACK,
          ffi.Pointer<ffi.Void>, int)>();

  int fb_print_blr(
    ffi.Pointer<ISC_UCHAR> arg0,
    int arg1,
    ISC_PRINT_CALLBACK arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
  ) {
    return _fb_print_blr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fb_print_blrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ISC_UCHAR>,
              ISC_ULONG,
              ISC_PRINT_CALLBACK,
              ffi.Pointer<ffi.Void>,
              ffi.Int16)>>('fb_print_blr');
  late final _fb_print_blr = _fb_print_blrPtr.asFunction<
      int Function(ffi.Pointer<ISC_UCHAR>, int, ISC_PRINT_CALLBACK,
          ffi.Pointer<ffi.Void>, int)>();

  void isc_set_debug(
    int arg0,
  ) {
    return _isc_set_debug(
      arg0,
    );
  }

  late final _isc_set_debugPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'isc_set_debug');
  late final _isc_set_debug =
      _isc_set_debugPtr.asFunction<void Function(int)>();

  void isc_qtoq(
    ffi.Pointer<ISC_QUAD> arg0,
    ffi.Pointer<ISC_QUAD> arg1,
  ) {
    return _isc_qtoq(
      arg0,
      arg1,
    );
  }

  late final _isc_qtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ISC_QUAD>, ffi.Pointer<ISC_QUAD>)>>('isc_qtoq');
  late final _isc_qtoq = _isc_qtoqPtr.asFunction<
      void Function(ffi.Pointer<ISC_QUAD>, ffi.Pointer<ISC_QUAD>)>();

  void isc_vtof(
    ffi.Pointer<ISC_SCHAR> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
  ) {
    return _isc_vtof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_vtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_SCHAR>, ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16)>>('isc_vtof');
  late final _isc_vtof = _isc_vtofPtr.asFunction<
      void Function(ffi.Pointer<ISC_SCHAR>, ffi.Pointer<ISC_SCHAR>, int)>();

  void isc_vtov(
    ffi.Pointer<ISC_SCHAR> arg0,
    ffi.Pointer<ISC_SCHAR> arg1,
    int arg2,
  ) {
    return _isc_vtov(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_vtovPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_SCHAR>, ffi.Pointer<ISC_SCHAR>,
              ffi.Int16)>>('isc_vtov');
  late final _isc_vtov = _isc_vtovPtr.asFunction<
      void Function(ffi.Pointer<ISC_SCHAR>, ffi.Pointer<ISC_SCHAR>, int)>();

  int isc_version(
    ffi.Pointer<isc_db_handle> arg0,
    ISC_VERSION_CALLBACK arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _isc_version(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _isc_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<isc_db_handle>, ISC_VERSION_CALLBACK,
              ffi.Pointer<ffi.Void>)>>('isc_version');
  late final _isc_version = _isc_versionPtr.asFunction<
      int Function(ffi.Pointer<isc_db_handle>, ISC_VERSION_CALLBACK,
          ffi.Pointer<ffi.Void>)>();

  int isc_reset_fpe(
    int arg0,
  ) {
    return _isc_reset_fpe(
      arg0,
    );
  }

  late final _isc_reset_fpePtr =
      _lookup<ffi.NativeFunction<ISC_LONG Function(ISC_USHORT)>>(
          'isc_reset_fpe');
  late final _isc_reset_fpe = _isc_reset_fpePtr.asFunction<int Function(int)>();

  int isc_baddress(
    ffi.Pointer<ISC_SCHAR> arg0,
  ) {
    return _isc_baddress(
      arg0,
    );
  }

  late final _isc_baddressPtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(ffi.Pointer<ISC_SCHAR>)>>(
          'isc_baddress');
  late final _isc_baddress =
      _isc_baddressPtr.asFunction<int Function(ffi.Pointer<ISC_SCHAR>)>();

  void isc_baddress_s(
    ffi.Pointer<ISC_SCHAR> arg0,
    ffi.Pointer<uintptr_t> arg1,
  ) {
    return _isc_baddress_s(
      arg0,
      arg1,
    );
  }

  late final _isc_baddress_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<uintptr_t>)>>('isc_baddress_s');
  late final _isc_baddress_s = _isc_baddress_sPtr.asFunction<
      void Function(ffi.Pointer<ISC_SCHAR>, ffi.Pointer<uintptr_t>)>();

  int isc_service_attach(
    ffi.Pointer<ISC_STATUS> arg0,
    int arg1,
    ffi.Pointer<ISC_SCHAR> arg2,
    ffi.Pointer<isc_svc_handle> arg3,
    int arg4,
    ffi.Pointer<ISC_SCHAR> arg5,
  ) {
    return _isc_service_attach(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _isc_service_attachPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Pointer<isc_svc_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_service_attach');
  late final _isc_service_attach = _isc_service_attachPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, int, ffi.Pointer<ISC_SCHAR>,
          ffi.Pointer<isc_svc_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  int isc_service_detach(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_svc_handle> arg1,
  ) {
    return _isc_service_detach(
      arg0,
      arg1,
    );
  }

  late final _isc_service_detachPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_svc_handle>)>>('isc_service_detach');
  late final _isc_service_detach = _isc_service_detachPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_svc_handle>)>();

  int isc_service_query(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_svc_handle> arg1,
    ffi.Pointer<isc_resv_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
    int arg5,
    ffi.Pointer<ISC_SCHAR> arg6,
    int arg7,
    ffi.Pointer<ISC_SCHAR> arg8,
  ) {
    return _isc_service_query(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _isc_service_queryPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_svc_handle>,
              ffi.Pointer<isc_resv_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_service_query');
  late final _isc_service_query = _isc_service_queryPtr.asFunction<
      int Function(
          ffi.Pointer<ISC_STATUS>,
          ffi.Pointer<isc_svc_handle>,
          ffi.Pointer<isc_resv_handle>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>,
          int,
          ffi.Pointer<ISC_SCHAR>)>();

  int isc_service_start(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_svc_handle> arg1,
    ffi.Pointer<isc_resv_handle> arg2,
    int arg3,
    ffi.Pointer<ISC_SCHAR> arg4,
  ) {
    return _isc_service_start(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _isc_service_startPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_svc_handle>,
              ffi.Pointer<isc_resv_handle>,
              ffi.Uint16,
              ffi.Pointer<ISC_SCHAR>)>>('isc_service_start');
  late final _isc_service_start = _isc_service_startPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_svc_handle>,
          ffi.Pointer<isc_resv_handle>, int, ffi.Pointer<ISC_SCHAR>)>();

  /// /
  int fb_shutdown(
    int arg0,
    int arg1,
  ) {
    return _fb_shutdown(
      arg0,
      arg1,
    );
  }

  late final _fb_shutdownPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32, ffi.Int32)>>(
          'fb_shutdown');
  late final _fb_shutdown =
      _fb_shutdownPtr.asFunction<int Function(int, int)>();

  int fb_shutdown_callback(
    ffi.Pointer<ISC_STATUS> arg0,
    FB_SHUTDOWN_CALLBACK arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _fb_shutdown_callback(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fb_shutdown_callbackPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>, FB_SHUTDOWN_CALLBACK,
              ffi.Int32, ffi.Pointer<ffi.Void>)>>('fb_shutdown_callback');
  late final _fb_shutdown_callback = _fb_shutdown_callbackPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, FB_SHUTDOWN_CALLBACK, int,
          ffi.Pointer<ffi.Void>)>();

  int fb_cancel_operation(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    int arg2,
  ) {
    return _fb_cancel_operation(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fb_cancel_operationPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>, ISC_USHORT)>>('fb_cancel_operation');
  late final _fb_cancel_operation = _fb_cancel_operationPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>, int)>();

  /// /
  int fb_ping(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
  ) {
    return _fb_ping(
      arg0,
      arg1,
    );
  }

  late final _fb_pingPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>)>>('fb_ping');
  late final _fb_ping = _fb_pingPtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>)>();

  /// /
  int fb_get_database_handle(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_db_handle> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _fb_get_database_handle(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fb_get_database_handlePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_db_handle>,
              ffi.Pointer<ffi.Void>)>>('fb_get_database_handle');
  late final _fb_get_database_handle = _fb_get_database_handlePtr.asFunction<
      int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_db_handle>,
          ffi.Pointer<ffi.Void>)>();

  int fb_get_transaction_handle(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<isc_tr_handle> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _fb_get_transaction_handle(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fb_get_transaction_handlePtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(
              ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ffi.Void>)>>('fb_get_transaction_handle');
  late final _fb_get_transaction_handle =
      _fb_get_transaction_handlePtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<isc_tr_handle>,
              ffi.Pointer<ffi.Void>)>();

  /// /
  void isc_get_client_version(
    ffi.Pointer<ISC_SCHAR> arg0,
  ) {
    return _isc_get_client_version(
      arg0,
    );
  }

  late final _isc_get_client_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ISC_SCHAR>)>>(
          'isc_get_client_version');
  late final _isc_get_client_version = _isc_get_client_versionPtr
      .asFunction<void Function(ffi.Pointer<ISC_SCHAR>)>();

  int isc_get_client_major_version() {
    return _isc_get_client_major_version();
  }

  late final _isc_get_client_major_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'isc_get_client_major_version');
  late final _isc_get_client_major_version =
      _isc_get_client_major_versionPtr.asFunction<int Function()>();

  int isc_get_client_minor_version() {
    return _isc_get_client_minor_version();
  }

  late final _isc_get_client_minor_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'isc_get_client_minor_version');
  late final _isc_get_client_minor_version =
      _isc_get_client_minor_versionPtr.asFunction<int Function()>();

  /// /
  int fb_database_crypt_callback(
    ffi.Pointer<ISC_STATUS> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _fb_database_crypt_callback(
      arg0,
      arg1,
    );
  }

  late final _fb_database_crypt_callbackPtr = _lookup<
      ffi.NativeFunction<
          ISC_STATUS Function(ffi.Pointer<ISC_STATUS>,
              ffi.Pointer<ffi.Void>)>>('fb_database_crypt_callback');
  late final _fb_database_crypt_callback =
      _fb_database_crypt_callbackPtr.asFunction<
          int Function(ffi.Pointer<ISC_STATUS>, ffi.Pointer<ffi.Void>)>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;
typedef wchar_t = ffi.Uint16;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

typedef errno_t = ffi.Int32;

class ISC_TIMESTAMP extends ffi.Struct {
  @ISC_DATE()
  external int timestamp_date;

  @ISC_TIME()
  external int timestamp_time;
}

typedef ISC_DATE = ffi.Int32;
typedef ISC_TIME = ffi.Uint32;

class GDS_QUAD_t extends ffi.Struct {
  @ISC_LONG()
  external int gds_quad_high;

  @ISC_ULONG()
  external int gds_quad_low;
}

typedef ISC_LONG = ffi.Int64;
typedef ISC_ULONG = ffi.Uint64;

class ISC_ARRAY_BOUND extends ffi.Struct {
  @ffi.Int16()
  external int array_bound_lower;

  @ffi.Int16()
  external int array_bound_upper;
}

class ISC_ARRAY_DESC extends ffi.Struct {
  @ISC_UCHAR()
  external int array_desc_dtype;

  @ISC_SCHAR()
  external int array_desc_scale;

  @ffi.Uint16()
  external int array_desc_length;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_SCHAR> array_desc_field_name;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_SCHAR> array_desc_relation_name;

  @ffi.Int16()
  external int array_desc_dimensions;

  @ffi.Int16()
  external int array_desc_flags;

  @ffi.Array.multi([16])
  external ffi.Array<ISC_ARRAY_BOUND> array_desc_bounds;
}

typedef ISC_UCHAR = ffi.Uint8;
typedef ISC_SCHAR = ffi.Int8;

class ISC_BLOB_DESC extends ffi.Struct {
  @ffi.Int16()
  external int blob_desc_subtype;

  @ffi.Int16()
  external int blob_desc_charset;

  @ffi.Int16()
  external int blob_desc_segment_size;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_UCHAR> blob_desc_field_name;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_UCHAR> blob_desc_relation_name;
}

/// /
class isc_blob_ctl extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ISC_STATUS Function()>> ctl_source;

  external ffi.Pointer<isc_blob_ctl> ctl_source_handle;

  @ffi.Int16()
  external int ctl_to_sub_type;

  @ffi.Int16()
  external int ctl_from_sub_type;

  @ffi.Uint16()
  external int ctl_buffer_length;

  @ffi.Uint16()
  external int ctl_segment_length;

  @ffi.Uint16()
  external int ctl_bpb_length;

  external ffi.Pointer<ISC_SCHAR> ctl_bpb;

  external ffi.Pointer<ISC_UCHAR> ctl_buffer;

  @ISC_LONG()
  external int ctl_max_segment;

  @ISC_LONG()
  external int ctl_number_segments;

  @ISC_LONG()
  external int ctl_total_length;

  external ffi.Pointer<ISC_STATUS> ctl_status;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int64> ctl_data;
}

typedef ISC_STATUS = ffi.IntPtr;

/// /
class bstream extends ffi.Struct {
  @isc_blob_handle()
  external int bstr_blob;

  external ffi.Pointer<ISC_SCHAR> bstr_buffer;

  external ffi.Pointer<ISC_SCHAR> bstr_ptr;

  @ffi.Int16()
  external int bstr_length;

  @ffi.Int16()
  external int bstr_cnt;

  @ffi.Int8()
  external int bstr_mode;
}

typedef isc_blob_handle = FB_API_HANDLE;
typedef FB_API_HANDLE = ffi.Uint32;

abstract class blob_lseek_mode {
  static const int blb_seek_relative = 1;
  static const int blb_seek_from_tail = 2;
}

abstract class blob_get_result {
  static const int blb_got_fragment = -1;
  static const int blb_got_eof = 0;
  static const int blb_got_full_segment = 1;
}

class blobcallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int16 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ISC_UCHAR>,
              ISC_USHORT, ffi.Pointer<ISC_USHORT>)>> blob_get_segment;

  external ffi.Pointer<ffi.Void> blob_handle;

  @ISC_LONG()
  external int blob_number_segments;

  @ISC_LONG()
  external int blob_max_segment;

  @ISC_LONG()
  external int blob_total_length;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ISC_UCHAR>, ISC_USHORT)>>
      blob_put_segment;

  external ffi.Pointer<
          ffi.NativeFunction<
              ISC_LONG Function(ffi.Pointer<ffi.Void>, ISC_USHORT, ISC_LONG)>>
      blob_lseek;
}

typedef ISC_USHORT = ffi.Uint16;

class paramdsc extends ffi.Struct {
  @ISC_UCHAR()
  external int dsc_dtype;

  @ffi.Int8()
  external int dsc_scale;

  @ISC_USHORT()
  external int dsc_length;

  @ffi.Int16()
  external int dsc_sub_type;

  @ISC_USHORT()
  external int dsc_flags;

  external ffi.Pointer<ISC_UCHAR> dsc_address;
}

class paramvary extends ffi.Struct {
  @ISC_USHORT()
  external int vary_length;

  @ffi.Array.multi([1])
  external ffi.Array<ISC_UCHAR> vary_string;
}

class XSQLVAR extends ffi.Struct {
  @ISC_SHORT()
  external int sqltype;

  @ISC_SHORT()
  external int sqlscale;

  @ISC_SHORT()
  external int sqlsubtype;

  @ISC_SHORT()
  external int sqllen;

  external ffi.Pointer<ISC_SCHAR> sqldata;

  external ffi.Pointer<ISC_SHORT> sqlind;

  @ISC_SHORT()
  external int sqlname_length;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_SCHAR> sqlname;

  @ISC_SHORT()
  external int relname_length;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_SCHAR> relname;

  @ISC_SHORT()
  external int ownname_length;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_SCHAR> ownname;

  @ISC_SHORT()
  external int aliasname_length;

  @ffi.Array.multi([32])
  external ffi.Array<ISC_SCHAR> aliasname;
}

typedef ISC_SHORT = ffi.Int16;

class XSQLDA extends ffi.Struct {
  @ISC_SHORT()
  external int version;

  @ffi.Array.multi([8])
  external ffi.Array<ISC_SCHAR> sqldaid;

  @ISC_LONG()
  external int sqldabc;

  @ISC_SHORT()
  external int sqln;

  @ISC_SHORT()
  external int sqld;

  @ffi.Array.multi([1])
  external ffi.Array<XSQLVAR> sqlvar;
}

typedef isc_db_handle = FB_API_HANDLE;
typedef isc_tr_handle = FB_API_HANDLE;
typedef ISC_QUAD = GDS_QUAD_t;
typedef isc_stmt_handle = FB_API_HANDLE;
typedef ISC_EVENT_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ISC_USHORT, ffi.Pointer<ISC_UCHAR>)>>;
typedef ISC_INT64 = ffi.Int64;

class USER_SEC_DATA extends ffi.Struct {
  @ffi.Int16()
  external int sec_flags;

  @ffi.Int32()
  external int uid;

  @ffi.Int32()
  external int gid;

  @ffi.Int32()
  external int protocol;

  external ffi.Pointer<ISC_SCHAR> server;

  external ffi.Pointer<ISC_SCHAR> user_name;

  external ffi.Pointer<ISC_SCHAR> password;

  external ffi.Pointer<ISC_SCHAR> group_name;

  external ffi.Pointer<ISC_SCHAR> first_name;

  external ffi.Pointer<ISC_SCHAR> middle_name;

  external ffi.Pointer<ISC_SCHAR> last_name;

  external ffi.Pointer<ISC_SCHAR> dba_user_name;

  external ffi.Pointer<ISC_SCHAR> dba_password;
}

typedef isc_req_handle = FB_API_HANDLE;

/// /
typedef FB_BLOB_STREAM = ffi.Pointer<bstream>;
typedef ISC_PRINT_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ISC_SHORT, ffi.Pointer<ffi.Int8>)>>;
typedef ISC_VERSION_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>)>>;
typedef isc_svc_handle = FB_API_HANDLE;
typedef isc_resv_handle = ISC_LONG;
typedef FB_SHUTDOWN_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

abstract class db_info_types {
  static const int isc_info_db_id = 4;
  static const int isc_info_reads = 5;
  static const int isc_info_writes = 6;
  static const int isc_info_fetches = 7;
  static const int isc_info_marks = 8;
  static const int isc_info_implementation = 11;
  static const int isc_info_isc_version = 12;
  static const int isc_info_base_level = 13;
  static const int isc_info_page_size = 14;
  static const int isc_info_num_buffers = 15;
  static const int isc_info_limbo = 16;
  static const int isc_info_current_memory = 17;
  static const int isc_info_max_memory = 18;
  static const int isc_info_window_turns = 19;
  static const int isc_info_license = 20;
  static const int isc_info_allocation = 21;
  static const int isc_info_attachment_id = 22;
  static const int isc_info_read_seq_count = 23;
  static const int isc_info_read_idx_count = 24;
  static const int isc_info_insert_count = 25;
  static const int isc_info_update_count = 26;
  static const int isc_info_delete_count = 27;
  static const int isc_info_backout_count = 28;
  static const int isc_info_purge_count = 29;
  static const int isc_info_expunge_count = 30;
  static const int isc_info_sweep_interval = 31;
  static const int isc_info_ods_version = 32;
  static const int isc_info_ods_minor_version = 33;
  static const int isc_info_no_reserve = 34;
  static const int isc_info_logfile = 35;
  static const int isc_info_cur_logfile_name = 36;
  static const int isc_info_cur_log_part_offset = 37;
  static const int isc_info_num_wal_buffers = 38;
  static const int isc_info_wal_buffer_size = 39;
  static const int isc_info_wal_ckpt_length = 40;
  static const int isc_info_wal_cur_ckpt_interval = 41;
  static const int isc_info_wal_prv_ckpt_fname = 42;
  static const int isc_info_wal_prv_ckpt_poffset = 43;
  static const int isc_info_wal_recv_ckpt_fname = 44;
  static const int isc_info_wal_recv_ckpt_poffset = 45;
  static const int isc_info_wal_grpc_wait_usecs = 47;
  static const int isc_info_wal_num_io = 48;
  static const int isc_info_wal_avg_io_size = 49;
  static const int isc_info_wal_num_commits = 50;
  static const int isc_info_wal_avg_grpc_size = 51;
  static const int isc_info_forced_writes = 52;
  static const int isc_info_user_names = 53;
  static const int isc_info_page_errors = 54;
  static const int isc_info_record_errors = 55;
  static const int isc_info_bpage_errors = 56;
  static const int isc_info_dpage_errors = 57;
  static const int isc_info_ipage_errors = 58;
  static const int isc_info_ppage_errors = 59;
  static const int isc_info_tpage_errors = 60;
  static const int isc_info_set_page_buffers = 61;
  static const int isc_info_db_sql_dialect = 62;
  static const int isc_info_db_read_only = 63;
  static const int isc_info_db_size_in_pages = 64;
  static const int frb_info_att_charset = 101;
  static const int isc_info_db_class = 102;
  static const int isc_info_firebird_version = 103;
  static const int isc_info_oldest_transaction = 104;
  static const int isc_info_oldest_active = 105;
  static const int isc_info_oldest_snapshot = 106;
  static const int isc_info_next_transaction = 107;
  static const int isc_info_db_provider = 108;
  static const int isc_info_active_transactions = 109;
  static const int isc_info_active_tran_count = 110;
  static const int isc_info_creation_date = 111;
  static const int isc_info_db_file_size = 112;
  static const int fb_info_page_contents = 113;
  static const int fb_info_implementation = 114;
  static const int fb_info_page_warns = 115;
  static const int fb_info_record_warns = 116;
  static const int fb_info_bpage_warns = 117;
  static const int fb_info_dpage_warns = 118;
  static const int fb_info_ipage_warns = 119;
  static const int fb_info_ppage_warns = 120;
  static const int fb_info_tpage_warns = 121;
  static const int fb_info_pip_errors = 122;
  static const int fb_info_pip_warns = 123;
  static const int fb_info_pages_used = 124;
  static const int fb_info_pages_free = 125;
  static const int fb_info_conn_flags = 132;
  static const int fb_info_crypt_key = 133;
  static const int fb_info_crypt_state = 134;
  static const int fb_info_db_file_id = 145;
  static const int isc_info_db_last_value = 146;
}

abstract class db_info_crypt {
  static const int fb_info_crypt_encrypted = 1;
  static const int fb_info_crypt_process = 2;
}

abstract class info_db_implementations {
  static const int isc_info_db_impl_rdb_vms = 1;
  static const int isc_info_db_impl_rdb_eln = 2;
  static const int isc_info_db_impl_rdb_eln_dev = 3;
  static const int isc_info_db_impl_rdb_vms_y = 4;
  static const int isc_info_db_impl_rdb_eln_y = 5;
  static const int isc_info_db_impl_jri = 6;
  static const int isc_info_db_impl_jsv = 7;
  static const int isc_info_db_impl_isc_apl_68K = 25;
  static const int isc_info_db_impl_isc_vax_ultr = 26;
  static const int isc_info_db_impl_isc_vms = 27;
  static const int isc_info_db_impl_isc_sun_68k = 28;
  static const int isc_info_db_impl_isc_os2 = 29;
  static const int isc_info_db_impl_isc_sun4 = 30;
  static const int isc_info_db_impl_isc_hp_ux = 31;
  static const int isc_info_db_impl_isc_sun_386i = 32;
  static const int isc_info_db_impl_isc_vms_orcl = 33;
  static const int isc_info_db_impl_isc_mac_aux = 34;
  static const int isc_info_db_impl_isc_rt_aix = 35;
  static const int isc_info_db_impl_isc_mips_ult = 36;
  static const int isc_info_db_impl_isc_xenix = 37;
  static const int isc_info_db_impl_isc_dg = 38;
  static const int isc_info_db_impl_isc_hp_mpexl = 39;
  static const int isc_info_db_impl_isc_hp_ux68K = 40;
  static const int isc_info_db_impl_isc_sgi = 41;
  static const int isc_info_db_impl_isc_sco_unix = 42;
  static const int isc_info_db_impl_isc_cray = 43;
  static const int isc_info_db_impl_isc_imp = 44;
  static const int isc_info_db_impl_isc_delta = 45;
  static const int isc_info_db_impl_isc_next = 46;
  static const int isc_info_db_impl_isc_dos = 47;
  static const int isc_info_db_impl_m88K = 48;
  static const int isc_info_db_impl_unixware = 49;
  static const int isc_info_db_impl_isc_winnt_x86 = 50;
  static const int isc_info_db_impl_isc_epson = 51;
  static const int isc_info_db_impl_alpha_osf = 52;
  static const int isc_info_db_impl_alpha_vms = 53;
  static const int isc_info_db_impl_netware_386 = 54;
  static const int isc_info_db_impl_win_only = 55;
  static const int isc_info_db_impl_ncr_3000 = 56;
  static const int isc_info_db_impl_winnt_ppc = 57;
  static const int isc_info_db_impl_dg_x86 = 58;
  static const int isc_info_db_impl_sco_ev = 59;
  static const int isc_info_db_impl_i386 = 60;
  static const int isc_info_db_impl_freebsd = 61;
  static const int isc_info_db_impl_netbsd = 62;
  static const int isc_info_db_impl_darwin_ppc = 63;
  static const int isc_info_db_impl_sinixz = 64;
  static const int isc_info_db_impl_linux_sparc = 65;
  static const int isc_info_db_impl_linux_amd64 = 66;
  static const int isc_info_db_impl_freebsd_amd64 = 67;
  static const int isc_info_db_impl_winnt_amd64 = 68;
  static const int isc_info_db_impl_linux_ppc = 69;
  static const int isc_info_db_impl_darwin_x86 = 70;
  static const int isc_info_db_impl_linux_mipsel = 71;
  static const int isc_info_db_impl_linux_mips = 72;
  static const int isc_info_db_impl_darwin_x64 = 73;
  static const int isc_info_db_impl_sun_amd64 = 74;
  static const int isc_info_db_impl_linux_arm = 75;
  static const int isc_info_db_impl_linux_ia64 = 76;
  static const int isc_info_db_impl_darwin_ppc64 = 77;
  static const int isc_info_db_impl_linux_s390x = 78;
  static const int isc_info_db_impl_linux_s390 = 79;
  static const int isc_info_db_impl_linux_sh = 80;
  static const int isc_info_db_impl_linux_sheb = 81;
  static const int isc_info_db_impl_linux_hppa = 82;
  static const int isc_info_db_impl_linux_alpha = 83;
  static const int isc_info_db_impl_linux_arm64 = 84;
  static const int isc_info_db_impl_linux_ppc64el = 85;
  static const int isc_info_db_impl_linux_ppc64 = 86;
  static const int isc_info_db_impl_linux_m68k = 87;
  static const int isc_info_db_impl_last_value = 88;
}

abstract class info_db_class {
  static const int isc_info_db_class_access = 1;
  static const int isc_info_db_class_y_valve = 2;
  static const int isc_info_db_class_rem_int = 3;
  static const int isc_info_db_class_rem_srvr = 4;
  static const int isc_info_db_class_pipe_int = 7;
  static const int isc_info_db_class_pipe_srvr = 8;
  static const int isc_info_db_class_sam_int = 9;
  static const int isc_info_db_class_sam_srvr = 10;
  static const int isc_info_db_class_gateway = 11;
  static const int isc_info_db_class_cache = 12;
  static const int isc_info_db_class_classic_access = 13;
  static const int isc_info_db_class_server_access = 14;
  static const int isc_info_db_class_last_value = 15;
}

abstract class info_db_provider {
  static const int isc_info_db_code_rdb_eln = 1;
  static const int isc_info_db_code_rdb_vms = 2;
  static const int isc_info_db_code_interbase = 3;
  static const int isc_info_db_code_firebird = 4;
  static const int isc_info_db_code_last_value = 5;
}

const int FB_API_VER = 30;

const int ISC_TRUE = 1;

const int ISC_FALSE = 0;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int ISC_STATUS_LENGTH = 20;

const int FB_SQLSTATE_LENGTH = 5;

const int FB_SQLSTATE_SIZE = 6;

const int FB_FALSE = 0;

const int FB_TRUE = 1;

const int DSC_null = 1;

const int DSC_no_subtype = 2;

const int DSC_nullable = 4;

const int dtype_unknown = 0;

const int dtype_text = 1;

const int dtype_cstring = 2;

const int dtype_varying = 3;

const int dtype_packed = 6;

const int dtype_byte = 7;

const int dtype_short = 8;

const int dtype_long = 9;

const int dtype_quad = 10;

const int dtype_real = 11;

const int dtype_double = 12;

const int dtype_d_float = 13;

const int dtype_sql_date = 14;

const int dtype_sql_time = 15;

const int dtype_timestamp = 16;

const int dtype_blob = 17;

const int dtype_array = 18;

const int dtype_int64 = 19;

const int dtype_dbkey = 20;

const int dtype_boolean = 21;

const int DTYPE_TYPE_MAX = 22;

const int ISC_TIME_SECONDS_PRECISION = 10000;

const int ISC_TIME_SECONDS_PRECISION_SCALE = -4;

const int DSQL_close = 1;

const int DSQL_drop = 2;

const int DSQL_unprepare = 4;

const int SQLDA_VERSION1 = 1;

const int SQL_TEXT = 452;

const int SQL_VARYING = 448;

const int SQL_SHORT = 500;

const int SQL_LONG = 496;

const int SQL_FLOAT = 482;

const int SQL_DOUBLE = 480;

const int SQL_D_FLOAT = 530;

const int SQL_TIMESTAMP = 510;

const int SQL_BLOB = 520;

const int SQL_ARRAY = 540;

const int SQL_QUAD = 550;

const int SQL_TYPE_TIME = 560;

const int SQL_TYPE_DATE = 570;

const int SQL_INT64 = 580;

const int SQL_BOOLEAN = 32764;

const int SQL_NULL = 32766;

const int SQL_DATE = 510;

const int SQL_DIALECT_V5 = 1;

const int SQL_DIALECT_V6_TRANSITION = 2;

const int SQL_DIALECT_V6 = 3;

const int SQL_DIALECT_CURRENT = 3;

const int sec_uid_spec = 1;

const int sec_gid_spec = 2;

const int sec_server_spec = 4;

const int sec_password_spec = 8;

const int sec_group_name_spec = 16;

const int sec_first_name_spec = 32;

const int sec_middle_name_spec = 64;

const int sec_last_name_spec = 128;

const int sec_dba_user_name_spec = 256;

const int sec_dba_password_spec = 512;

const int sec_protocol_tcpip = 1;

const int sec_protocol_netbeui = 2;

const int sec_protocol_spx = 3;

const int sec_protocol_local = 4;

const int isc_blob_filter_open = 0;

const int isc_blob_filter_get_segment = 1;

const int isc_blob_filter_close = 2;

const int isc_blob_filter_create = 3;

const int isc_blob_filter_put_segment = 4;

const int isc_blob_filter_alloc = 5;

const int isc_blob_filter_free = 6;

const int isc_blob_filter_seek = 7;

const int blr_text = 14;

const int blr_text2 = 15;

const int blr_short = 7;

const int blr_long = 8;

const int blr_quad = 9;

const int blr_float = 10;

const int blr_double = 27;

const int blr_d_float = 11;

const int blr_timestamp = 35;

const int blr_varying = 37;

const int blr_varying2 = 38;

const int blr_blob = 261;

const int blr_cstring = 40;

const int blr_cstring2 = 41;

const int blr_blob_id = 45;

const int blr_sql_date = 12;

const int blr_sql_time = 13;

const int blr_int64 = 16;

const int blr_blob2 = 17;

const int blr_domain_name = 18;

const int blr_domain_name2 = 19;

const int blr_not_nullable = 20;

const int blr_column_name = 21;

const int blr_column_name2 = 22;

const int blr_bool = 23;

const int blr_domain_type_of = 0;

const int blr_domain_full = 1;

const int blr_date = 35;

const int blr_inner = 0;

const int blr_left = 1;

const int blr_right = 2;

const int blr_full = 3;

const int blr_gds_code = 0;

const int blr_sql_code = 1;

const int blr_exception = 2;

const int blr_trigger_code = 3;

const int blr_default_code = 4;

const int blr_raise = 5;

const int blr_exception_msg = 6;

const int blr_exception_params = 7;

const int blr_sql_state = 8;

const int blr_version4 = 4;

const int blr_version5 = 5;

const int blr_eoc = 76;

const int blr_end = 255;

const int blr_assignment = 1;

const int blr_begin = 2;

const int blr_dcl_variable = 3;

const int blr_message = 4;

const int blr_erase = 5;

const int blr_fetch = 6;

const int blr_for = 7;

const int blr_if = 8;

const int blr_loop = 9;

const int blr_modify = 10;

const int blr_handler = 11;

const int blr_receive = 12;

const int blr_select = 13;

const int blr_send = 14;

const int blr_store = 15;

const int blr_label = 17;

const int blr_leave = 18;

const int blr_store2 = 19;

const int blr_post = 20;

const int blr_literal = 21;

const int blr_dbkey = 22;

const int blr_field = 23;

const int blr_fid = 24;

const int blr_parameter = 25;

const int blr_variable = 26;

const int blr_average = 27;

const int blr_count = 28;

const int blr_maximum = 29;

const int blr_minimum = 30;

const int blr_total = 31;

const int blr_add = 34;

const int blr_subtract = 35;

const int blr_multiply = 36;

const int blr_divide = 37;

const int blr_negate = 38;

const int blr_concatenate = 39;

const int blr_substring = 40;

const int blr_parameter2 = 41;

const int blr_from = 42;

const int blr_via = 43;

const int blr_user_name = 44;

const int blr_null = 45;

const int blr_equiv = 46;

const int blr_eql = 47;

const int blr_neq = 48;

const int blr_gtr = 49;

const int blr_geq = 50;

const int blr_lss = 51;

const int blr_leq = 52;

const int blr_containing = 53;

const int blr_matching = 54;

const int blr_starting = 55;

const int blr_between = 56;

const int blr_or = 57;

const int blr_and = 58;

const int blr_not = 59;

const int blr_any = 60;

const int blr_missing = 61;

const int blr_unique = 62;

const int blr_like = 63;

const int blr_rse = 67;

const int blr_first = 68;

const int blr_project = 69;

const int blr_sort = 70;

const int blr_boolean = 71;

const int blr_ascending = 72;

const int blr_descending = 73;

const int blr_relation = 74;

const int blr_rid = 75;

const int blr_union = 76;

const int blr_map = 77;

const int blr_group_by = 78;

const int blr_aggregate = 79;

const int blr_join_type = 80;

const int blr_agg_count = 83;

const int blr_agg_max = 84;

const int blr_agg_min = 85;

const int blr_agg_total = 86;

const int blr_agg_average = 87;

const int blr_parameter3 = 88;

const int blr_agg_count2 = 93;

const int blr_agg_count_distinct = 94;

const int blr_agg_total_distinct = 95;

const int blr_agg_average_distinct = 96;

const int blr_function = 100;

const int blr_gen_id = 101;

const int blr_upcase = 103;

const int blr_value_if = 105;

const int blr_matching2 = 106;

const int blr_index = 107;

const int blr_ansi_like = 108;

const int blr_scrollable = 109;

const int blr_run_count = 118;

const int blr_rs_stream = 119;

const int blr_exec_proc = 120;

const int blr_procedure = 124;

const int blr_pid = 125;

const int blr_exec_pid = 126;

const int blr_singular = 127;

const int blr_abort = 128;

const int blr_block = 129;

const int blr_error_handler = 130;

const int blr_cast = 131;

const int blr_pid2 = 132;

const int blr_procedure2 = 133;

const int blr_start_savepoint = 134;

const int blr_end_savepoint = 135;

const int blr_plan = 139;

const int blr_merge = 140;

const int blr_join = 141;

const int blr_sequential = 142;

const int blr_navigational = 143;

const int blr_indices = 144;

const int blr_retrieve = 145;

const int blr_relation2 = 146;

const int blr_rid2 = 147;

const int blr_set_generator = 150;

const int blr_ansi_any = 151;

const int blr_exists = 152;

const int blr_record_version = 154;

const int blr_stall = 155;

const int blr_ansi_all = 158;

const int blr_extract = 159;

const int blr_extract_year = 0;

const int blr_extract_month = 1;

const int blr_extract_day = 2;

const int blr_extract_hour = 3;

const int blr_extract_minute = 4;

const int blr_extract_second = 5;

const int blr_extract_weekday = 6;

const int blr_extract_yearday = 7;

const int blr_extract_millisecond = 8;

const int blr_extract_week = 9;

const int blr_current_date = 160;

const int blr_current_timestamp = 161;

const int blr_current_time = 162;

const int blr_post_arg = 163;

const int blr_exec_into = 164;

const int blr_user_savepoint = 165;

const int blr_dcl_cursor = 166;

const int blr_cursor_stmt = 167;

const int blr_current_timestamp2 = 168;

const int blr_current_time2 = 169;

const int blr_agg_list = 170;

const int blr_agg_list_distinct = 171;

const int blr_modify2 = 172;

const int blr_current_role = 174;

const int blr_skip = 175;

const int blr_exec_sql = 176;

const int blr_internal_info = 177;

const int blr_nullsfirst = 178;

const int blr_writelock = 179;

const int blr_nullslast = 180;

const int blr_lowcase = 181;

const int blr_strlen = 182;

const int blr_strlen_bit = 0;

const int blr_strlen_char = 1;

const int blr_strlen_octet = 2;

const int blr_trim = 183;

const int blr_trim_both = 0;

const int blr_trim_leading = 1;

const int blr_trim_trailing = 2;

const int blr_trim_spaces = 0;

const int blr_trim_characters = 1;

const int blr_savepoint_set = 0;

const int blr_savepoint_release = 1;

const int blr_savepoint_undo = 2;

const int blr_savepoint_release_single = 3;

const int blr_cursor_open = 0;

const int blr_cursor_close = 1;

const int blr_cursor_fetch = 2;

const int blr_cursor_fetch_scroll = 3;

const int blr_scroll_forward = 0;

const int blr_scroll_backward = 1;

const int blr_scroll_bof = 2;

const int blr_scroll_eof = 3;

const int blr_scroll_absolute = 4;

const int blr_scroll_relative = 5;

const int blr_init_variable = 184;

const int blr_recurse = 185;

const int blr_sys_function = 186;

const int blr_auto_trans = 187;

const int blr_similar = 188;

const int blr_exec_stmt = 189;

const int blr_exec_stmt_inputs = 1;

const int blr_exec_stmt_outputs = 2;

const int blr_exec_stmt_sql = 3;

const int blr_exec_stmt_proc_block = 4;

const int blr_exec_stmt_data_src = 5;

const int blr_exec_stmt_user = 6;

const int blr_exec_stmt_pwd = 7;

const int blr_exec_stmt_tran = 8;

const int blr_exec_stmt_tran_clone = 9;

const int blr_exec_stmt_privs = 10;

const int blr_exec_stmt_in_params = 11;

const int blr_exec_stmt_in_params2 = 12;

const int blr_exec_stmt_out_params = 13;

const int blr_exec_stmt_role = 14;

const int blr_stmt_expr = 190;

const int blr_derived_expr = 191;

const int blr_procedure3 = 192;

const int blr_exec_proc2 = 193;

const int blr_function2 = 194;

const int blr_window = 195;

const int blr_partition_by = 196;

const int blr_continue_loop = 197;

const int blr_procedure4 = 198;

const int blr_agg_function = 199;

const int blr_substring_similar = 200;

const int blr_bool_as_value = 201;

const int blr_coalesce = 202;

const int blr_decode = 203;

const int blr_exec_subproc = 204;

const int blr_subproc_decl = 205;

const int blr_subproc = 206;

const int blr_subfunc_decl = 207;

const int blr_subfunc = 208;

const int blr_record_version2 = 209;

const int blr_gen_id2 = 210;

const int blr_local_timestamp = 214;

const int blr_local_time = 215;

const int blr_marks = 217;

const int isc_dpb_version1 = 1;

const int isc_dpb_version2 = 2;

const int isc_dpb_cdd_pathname = 1;

const int isc_dpb_allocation = 2;

const int isc_dpb_journal = 3;

const int isc_dpb_page_size = 4;

const int isc_dpb_num_buffers = 5;

const int isc_dpb_buffer_length = 6;

const int isc_dpb_debug = 7;

const int isc_dpb_garbage_collect = 8;

const int isc_dpb_verify = 9;

const int isc_dpb_sweep = 10;

const int isc_dpb_enable_journal = 11;

const int isc_dpb_disable_journal = 12;

const int isc_dpb_dbkey_scope = 13;

const int isc_dpb_number_of_users = 14;

const int isc_dpb_trace = 15;

const int isc_dpb_no_garbage_collect = 16;

const int isc_dpb_damaged = 17;

const int isc_dpb_license = 18;

const int isc_dpb_sys_user_name = 19;

const int isc_dpb_encrypt_key = 20;

const int isc_dpb_activate_shadow = 21;

const int isc_dpb_sweep_interval = 22;

const int isc_dpb_delete_shadow = 23;

const int isc_dpb_force_write = 24;

const int isc_dpb_begin_log = 25;

const int isc_dpb_quit_log = 26;

const int isc_dpb_no_reserve = 27;

const int isc_dpb_user_name = 28;

const int isc_dpb_password = 29;

const int isc_dpb_password_enc = 30;

const int isc_dpb_sys_user_name_enc = 31;

const int isc_dpb_interp = 32;

const int isc_dpb_online_dump = 33;

const int isc_dpb_old_file_size = 34;

const int isc_dpb_old_num_files = 35;

const int isc_dpb_old_file = 36;

const int isc_dpb_old_start_page = 37;

const int isc_dpb_old_start_seqno = 38;

const int isc_dpb_old_start_file = 39;

const int isc_dpb_drop_walfile = 40;

const int isc_dpb_old_dump_id = 41;

const int isc_dpb_wal_backup_dir = 42;

const int isc_dpb_wal_chkptlen = 43;

const int isc_dpb_wal_numbufs = 44;

const int isc_dpb_wal_bufsize = 45;

const int isc_dpb_wal_grp_cmt_wait = 46;

const int isc_dpb_lc_messages = 47;

const int isc_dpb_lc_ctype = 48;

const int isc_dpb_cache_manager = 49;

const int isc_dpb_shutdown = 50;

const int isc_dpb_online = 51;

const int isc_dpb_shutdown_delay = 52;

const int isc_dpb_reserved = 53;

const int isc_dpb_overwrite = 54;

const int isc_dpb_sec_attach = 55;

const int isc_dpb_disable_wal = 56;

const int isc_dpb_connect_timeout = 57;

const int isc_dpb_dummy_packet_interval = 58;

const int isc_dpb_gbak_attach = 59;

const int isc_dpb_sql_role_name = 60;

const int isc_dpb_set_page_buffers = 61;

const int isc_dpb_working_directory = 62;

const int isc_dpb_sql_dialect = 63;

const int isc_dpb_set_db_readonly = 64;

const int isc_dpb_set_db_sql_dialect = 65;

const int isc_dpb_gfix_attach = 66;

const int isc_dpb_gstat_attach = 67;

const int isc_dpb_set_db_charset = 68;

const int isc_dpb_gsec_attach = 69;

const int isc_dpb_address_path = 70;

const int isc_dpb_process_id = 71;

const int isc_dpb_no_db_triggers = 72;

const int isc_dpb_trusted_auth = 73;

const int isc_dpb_process_name = 74;

const int isc_dpb_trusted_role = 75;

const int isc_dpb_org_filename = 76;

const int isc_dpb_utf8_filename = 77;

const int isc_dpb_ext_call_depth = 78;

const int isc_dpb_auth_block = 79;

const int isc_dpb_client_version = 80;

const int isc_dpb_remote_protocol = 81;

const int isc_dpb_host_name = 82;

const int isc_dpb_os_user = 83;

const int isc_dpb_specific_auth_data = 84;

const int isc_dpb_auth_plugin_list = 85;

const int isc_dpb_auth_plugin_name = 86;

const int isc_dpb_config = 87;

const int isc_dpb_nolinger = 88;

const int isc_dpb_reset_icu = 89;

const int isc_dpb_map_attach = 90;

const int isc_dpb_address = 1;

const int isc_dpb_addr_protocol = 1;

const int isc_dpb_addr_endpoint = 2;

const int isc_dpb_addr_flags = 3;

const int isc_dpb_addr_flag_conn_compressed = 1;

const int isc_dpb_addr_flag_conn_encrypted = 2;

const int isc_dpb_pages = 1;

const int isc_dpb_records = 2;

const int isc_dpb_indices = 4;

const int isc_dpb_transactions = 8;

const int isc_dpb_no_update = 16;

const int isc_dpb_repair = 32;

const int isc_dpb_ignore = 64;

const int isc_dpb_shut_cache = 1;

const int isc_dpb_shut_attachment = 2;

const int isc_dpb_shut_transaction = 4;

const int isc_dpb_shut_force = 8;

const int isc_dpb_shut_mode_mask = 112;

const int isc_dpb_shut_default = 0;

const int isc_dpb_shut_normal = 16;

const int isc_dpb_shut_multi = 32;

const int isc_dpb_shut_single = 48;

const int isc_dpb_shut_full = 64;

const int RDB_system = 1;

const int RDB_id_assigned = 2;

const int isc_tpb_version1 = 1;

const int isc_tpb_version3 = 3;

const int isc_tpb_consistency = 1;

const int isc_tpb_concurrency = 2;

const int isc_tpb_shared = 3;

const int isc_tpb_protected = 4;

const int isc_tpb_exclusive = 5;

const int isc_tpb_wait = 6;

const int isc_tpb_nowait = 7;

const int isc_tpb_read = 8;

const int isc_tpb_write = 9;

const int isc_tpb_lock_read = 10;

const int isc_tpb_lock_write = 11;

const int isc_tpb_verb_time = 12;

const int isc_tpb_commit_time = 13;

const int isc_tpb_ignore_limbo = 14;

const int isc_tpb_read_committed = 15;

const int isc_tpb_autocommit = 16;

const int isc_tpb_rec_version = 17;

const int isc_tpb_no_rec_version = 18;

const int isc_tpb_restart_requests = 19;

const int isc_tpb_no_auto_undo = 20;

const int isc_tpb_lock_timeout = 21;

const int isc_bpb_version1 = 1;

const int isc_bpb_source_type = 1;

const int isc_bpb_target_type = 2;

const int isc_bpb_type = 3;

const int isc_bpb_source_interp = 4;

const int isc_bpb_target_interp = 5;

const int isc_bpb_filter_parameter = 6;

const int isc_bpb_storage = 7;

const int isc_bpb_type_segmented = 0;

const int isc_bpb_type_stream = 1;

const int isc_bpb_storage_main = 0;

const int isc_bpb_storage_temp = 2;

const int isc_spb_version1 = 1;

const int isc_spb_current_version = 2;

const int isc_spb_version = 2;

const int isc_spb_version3 = 3;

const int isc_spb_user_name = 28;

const int isc_spb_sys_user_name = 19;

const int isc_spb_sys_user_name_enc = 31;

const int isc_spb_password = 29;

const int isc_spb_password_enc = 30;

const int isc_spb_command_line = 105;

const int isc_spb_dbname = 106;

const int isc_spb_verbose = 107;

const int isc_spb_options = 108;

const int isc_spb_address_path = 109;

const int isc_spb_process_id = 110;

const int isc_spb_trusted_auth = 111;

const int isc_spb_process_name = 112;

const int isc_spb_trusted_role = 113;

const int isc_spb_verbint = 114;

const int isc_spb_auth_block = 115;

const int isc_spb_auth_plugin_name = 116;

const int isc_spb_auth_plugin_list = 117;

const int isc_spb_utf8_filename = 118;

const int isc_spb_client_version = 119;

const int isc_spb_remote_protocol = 120;

const int isc_spb_host_name = 121;

const int isc_spb_os_user = 122;

const int isc_spb_config = 123;

const int isc_spb_expected_db = 124;

const int isc_spb_connect_timeout = 57;

const int isc_spb_dummy_packet_interval = 58;

const int isc_spb_sql_role_name = 60;

const int isc_spb_specific_auth_data = 111;

const int isc_action_svc_backup = 1;

const int isc_action_svc_restore = 2;

const int isc_action_svc_repair = 3;

const int isc_action_svc_add_user = 4;

const int isc_action_svc_delete_user = 5;

const int isc_action_svc_modify_user = 6;

const int isc_action_svc_display_user = 7;

const int isc_action_svc_properties = 8;

const int isc_action_svc_add_license = 9;

const int isc_action_svc_remove_license = 10;

const int isc_action_svc_db_stats = 11;

const int isc_action_svc_get_ib_log = 12;

const int isc_action_svc_get_fb_log = 12;

const int isc_action_svc_nbak = 20;

const int isc_action_svc_nrest = 21;

const int isc_action_svc_trace_start = 22;

const int isc_action_svc_trace_stop = 23;

const int isc_action_svc_trace_suspend = 24;

const int isc_action_svc_trace_resume = 25;

const int isc_action_svc_trace_list = 26;

const int isc_action_svc_set_mapping = 27;

const int isc_action_svc_drop_mapping = 28;

const int isc_action_svc_display_user_adm = 29;

const int isc_action_svc_validate = 30;

const int isc_action_svc_last = 31;

const int isc_info_svc_svr_db_info = 50;

const int isc_info_svc_get_license = 51;

const int isc_info_svc_get_license_mask = 52;

const int isc_info_svc_get_config = 53;

const int isc_info_svc_version = 54;

const int isc_info_svc_server_version = 55;

const int isc_info_svc_implementation = 56;

const int isc_info_svc_capabilities = 57;

const int isc_info_svc_user_dbpath = 58;

const int isc_info_svc_get_env = 59;

const int isc_info_svc_get_env_lock = 60;

const int isc_info_svc_get_env_msg = 61;

const int isc_info_svc_line = 62;

const int isc_info_svc_to_eof = 63;

const int isc_info_svc_timeout = 64;

const int isc_info_svc_get_licensed_users = 65;

const int isc_info_svc_limbo_trans = 66;

const int isc_info_svc_running = 67;

const int isc_info_svc_get_users = 68;

const int isc_info_svc_auth_block = 69;

const int isc_info_svc_stdin = 78;

const int isc_spb_sec_userid = 5;

const int isc_spb_sec_groupid = 6;

const int isc_spb_sec_username = 7;

const int isc_spb_sec_password = 8;

const int isc_spb_sec_groupname = 9;

const int isc_spb_sec_firstname = 10;

const int isc_spb_sec_middlename = 11;

const int isc_spb_sec_lastname = 12;

const int isc_spb_sec_admin = 13;

const int isc_spb_lic_key = 5;

const int isc_spb_lic_id = 6;

const int isc_spb_lic_desc = 7;

const int isc_spb_bkp_file = 5;

const int isc_spb_bkp_factor = 6;

const int isc_spb_bkp_length = 7;

const int isc_spb_bkp_skip_data = 8;

const int isc_spb_bkp_stat = 15;

const int isc_spb_bkp_ignore_checksums = 1;

const int isc_spb_bkp_ignore_limbo = 2;

const int isc_spb_bkp_metadata_only = 4;

const int isc_spb_bkp_no_garbage_collect = 8;

const int isc_spb_bkp_old_descriptions = 16;

const int isc_spb_bkp_non_transportable = 32;

const int isc_spb_bkp_convert = 64;

const int isc_spb_bkp_expand = 128;

const int isc_spb_bkp_no_triggers = 32768;

const int isc_spb_prp_page_buffers = 5;

const int isc_spb_prp_sweep_interval = 6;

const int isc_spb_prp_shutdown_db = 7;

const int isc_spb_prp_deny_new_attachments = 9;

const int isc_spb_prp_deny_new_transactions = 10;

const int isc_spb_prp_reserve_space = 11;

const int isc_spb_prp_write_mode = 12;

const int isc_spb_prp_access_mode = 13;

const int isc_spb_prp_set_sql_dialect = 14;

const int isc_spb_prp_activate = 256;

const int isc_spb_prp_db_online = 512;

const int isc_spb_prp_nolinger = 1024;

const int isc_spb_prp_force_shutdown = 41;

const int isc_spb_prp_attachments_shutdown = 42;

const int isc_spb_prp_transactions_shutdown = 43;

const int isc_spb_prp_shutdown_mode = 44;

const int isc_spb_prp_online_mode = 45;

const int isc_spb_prp_sm_normal = 0;

const int isc_spb_prp_sm_multi = 1;

const int isc_spb_prp_sm_single = 2;

const int isc_spb_prp_sm_full = 3;

const int isc_spb_prp_res_use_full = 35;

const int isc_spb_prp_res = 36;

const int isc_spb_prp_wm_async = 37;

const int isc_spb_prp_wm_sync = 38;

const int isc_spb_prp_am_readonly = 39;

const int isc_spb_prp_am_readwrite = 40;

const int isc_spb_rpr_commit_trans = 15;

const int isc_spb_rpr_rollback_trans = 34;

const int isc_spb_rpr_recover_two_phase = 17;

const int isc_spb_tra_id = 18;

const int isc_spb_single_tra_id = 19;

const int isc_spb_multi_tra_id = 20;

const int isc_spb_tra_state = 21;

const int isc_spb_tra_state_limbo = 22;

const int isc_spb_tra_state_commit = 23;

const int isc_spb_tra_state_rollback = 24;

const int isc_spb_tra_state_unknown = 25;

const int isc_spb_tra_host_site = 26;

const int isc_spb_tra_remote_site = 27;

const int isc_spb_tra_db_path = 28;

const int isc_spb_tra_advise = 29;

const int isc_spb_tra_advise_commit = 30;

const int isc_spb_tra_advise_rollback = 31;

const int isc_spb_tra_advise_unknown = 33;

const int isc_spb_tra_id_64 = 46;

const int isc_spb_single_tra_id_64 = 47;

const int isc_spb_multi_tra_id_64 = 48;

const int isc_spb_rpr_commit_trans_64 = 49;

const int isc_spb_rpr_rollback_trans_64 = 50;

const int isc_spb_rpr_recover_two_phase_64 = 51;

const int isc_spb_rpr_validate_db = 1;

const int isc_spb_rpr_sweep_db = 2;

const int isc_spb_rpr_mend_db = 4;

const int isc_spb_rpr_list_limbo_trans = 8;

const int isc_spb_rpr_check_db = 16;

const int isc_spb_rpr_ignore_checksum = 32;

const int isc_spb_rpr_kill_shadows = 64;

const int isc_spb_rpr_full = 128;

const int isc_spb_rpr_icu = 2048;

const int isc_spb_res_skip_data = 8;

const int isc_spb_res_buffers = 9;

const int isc_spb_res_page_size = 10;

const int isc_spb_res_length = 11;

const int isc_spb_res_access_mode = 12;

const int isc_spb_res_fix_fss_data = 13;

const int isc_spb_res_fix_fss_metadata = 14;

const int isc_spb_res_stat = 15;

const int isc_spb_res_metadata_only = 4;

const int isc_spb_res_deactivate_idx = 256;

const int isc_spb_res_no_shadow = 512;

const int isc_spb_res_no_validity = 1024;

const int isc_spb_res_one_at_a_time = 2048;

const int isc_spb_res_replace = 4096;

const int isc_spb_res_create = 8192;

const int isc_spb_res_use_all_space = 16384;

const int isc_spb_val_tab_incl = 1;

const int isc_spb_val_tab_excl = 2;

const int isc_spb_val_idx_incl = 3;

const int isc_spb_val_idx_excl = 4;

const int isc_spb_val_lock_timeout = 5;

const int isc_spb_res_am_readonly = 39;

const int isc_spb_res_am_readwrite = 40;

const int isc_spb_num_att = 5;

const int isc_spb_num_db = 6;

const int isc_spb_sts_table = 64;

const int isc_spb_sts_data_pages = 1;

const int isc_spb_sts_db_log = 2;

const int isc_spb_sts_hdr_pages = 4;

const int isc_spb_sts_idx_pages = 8;

const int isc_spb_sts_sys_relations = 16;

const int isc_spb_sts_record_versions = 32;

const int isc_spb_sts_nocreation = 128;

const int isc_spb_sts_encryption = 256;

const int isc_spb_nbk_level = 5;

const int isc_spb_nbk_file = 6;

const int isc_spb_nbk_direct = 7;

const int isc_spb_nbk_no_triggers = 1;

const int isc_spb_trc_id = 1;

const int isc_spb_trc_name = 2;

const int isc_spb_trc_cfg = 3;

const int isc_sdl_version1 = 1;

const int isc_sdl_eoc = 255;

const int isc_sdl_relation = 2;

const int isc_sdl_rid = 3;

const int isc_sdl_field = 4;

const int isc_sdl_fid = 5;

const int isc_sdl_struct = 6;

const int isc_sdl_variable = 7;

const int isc_sdl_scalar = 8;

const int isc_sdl_tiny_integer = 9;

const int isc_sdl_short_integer = 10;

const int isc_sdl_long_integer = 11;

const int isc_sdl_add = 13;

const int isc_sdl_subtract = 14;

const int isc_sdl_multiply = 15;

const int isc_sdl_divide = 16;

const int isc_sdl_negate = 17;

const int isc_sdl_begin = 31;

const int isc_sdl_end = 32;

const int isc_sdl_do3 = 33;

const int isc_sdl_do2 = 34;

const int isc_sdl_do1 = 35;

const int isc_sdl_element = 36;

const int isc_blob_untyped = 0;

const int isc_blob_text = 1;

const int isc_blob_blr = 2;

const int isc_blob_acl = 3;

const int isc_blob_ranges = 4;

const int isc_blob_summary = 5;

const int isc_blob_format = 6;

const int isc_blob_tra = 7;

const int isc_blob_extfile = 8;

const int isc_blob_debug_info = 9;

const int isc_blob_max_predefined_subtype = 10;

const int fb_shut_confirmation = 1;

const int fb_shut_preproviders = 2;

const int fb_shut_postproviders = 4;

const int fb_shut_finish = 8;

const int fb_shut_exit = 16;

const int fb_shutrsn_svc_stopped = -1;

const int fb_shutrsn_no_connection = -2;

const int fb_shutrsn_app_stopped = -3;

const int fb_shutrsn_signal = -5;

const int fb_shutrsn_services = -6;

const int fb_shutrsn_exit_called = -7;

const int fb_shutrsn_emergency = -8;

const int fb_cancel_disable = 1;

const int fb_cancel_enable = 2;

const int fb_cancel_raise = 3;

const int fb_cancel_abort = 4;

const int fb_dbg_version = 1;

const int fb_dbg_end = 255;

const int fb_dbg_map_src2blr = 2;

const int fb_dbg_map_varname = 3;

const int fb_dbg_map_argument = 4;

const int fb_dbg_subproc = 5;

const int fb_dbg_subfunc = 6;

const int fb_dbg_map_curname = 7;

const int fb_dbg_arg_input = 0;

const int fb_dbg_arg_output = 1;

const int isc_info_end = 1;

const int isc_info_truncated = 2;

const int isc_info_error = 3;

const int isc_info_data_not_ready = 4;

const int isc_info_length = 126;

const int isc_info_flag_end = 127;

const int isc_info_version = 12;

const int isc_info_number_messages = 4;

const int isc_info_max_message = 5;

const int isc_info_max_send = 6;

const int isc_info_max_receive = 7;

const int isc_info_state = 8;

const int isc_info_message_number = 9;

const int isc_info_message_size = 10;

const int isc_info_request_cost = 11;

const int isc_info_access_path = 12;

const int isc_info_req_select_count = 13;

const int isc_info_req_insert_count = 14;

const int isc_info_req_update_count = 15;

const int isc_info_req_delete_count = 16;

const int isc_info_rsb_end = 0;

const int isc_info_rsb_begin = 1;

const int isc_info_rsb_type = 2;

const int isc_info_rsb_relation = 3;

const int isc_info_rsb_plan = 4;

const int isc_info_rsb_unknown = 1;

const int isc_info_rsb_indexed = 2;

const int isc_info_rsb_navigate = 3;

const int isc_info_rsb_sequential = 4;

const int isc_info_rsb_cross = 5;

const int isc_info_rsb_sort = 6;

const int isc_info_rsb_first = 7;

const int isc_info_rsb_boolean = 8;

const int isc_info_rsb_union = 9;

const int isc_info_rsb_aggregate = 10;

const int isc_info_rsb_merge = 11;

const int isc_info_rsb_ext_sequential = 12;

const int isc_info_rsb_ext_indexed = 13;

const int isc_info_rsb_ext_dbkey = 14;

const int isc_info_rsb_left_cross = 15;

const int isc_info_rsb_select = 16;

const int isc_info_rsb_sql_join = 17;

const int isc_info_rsb_simulate = 18;

const int isc_info_rsb_sim_cross = 19;

const int isc_info_rsb_once = 20;

const int isc_info_rsb_procedure = 21;

const int isc_info_rsb_skip = 22;

const int isc_info_rsb_virt_sequential = 23;

const int isc_info_rsb_recursive = 24;

const int isc_info_rsb_window = 25;

const int isc_info_rsb_singular = 26;

const int isc_info_rsb_writelock = 27;

const int isc_info_rsb_buffer = 28;

const int isc_info_rsb_hash = 29;

const int isc_info_rsb_and = 1;

const int isc_info_rsb_or = 2;

const int isc_info_rsb_dbkey = 3;

const int isc_info_rsb_index = 4;

const int isc_info_req_active = 2;

const int isc_info_req_inactive = 3;

const int isc_info_req_send = 4;

const int isc_info_req_receive = 5;

const int isc_info_req_select = 6;

const int isc_info_req_sql_stall = 7;

const int isc_info_blob_num_segments = 4;

const int isc_info_blob_max_segment = 5;

const int isc_info_blob_total_length = 6;

const int isc_info_blob_type = 7;

const int isc_info_tra_id = 4;

const int isc_info_tra_oldest_interesting = 5;

const int isc_info_tra_oldest_snapshot = 6;

const int isc_info_tra_oldest_active = 7;

const int isc_info_tra_isolation = 8;

const int isc_info_tra_access = 9;

const int isc_info_tra_lock_timeout = 10;

const int fb_info_tra_dbpath = 11;

const int isc_info_tra_consistency = 1;

const int isc_info_tra_concurrency = 2;

const int isc_info_tra_read_committed = 3;

const int isc_info_tra_no_rec_version = 0;

const int isc_info_tra_rec_version = 1;

const int isc_info_tra_readonly = 0;

const int isc_info_tra_readwrite = 1;

const int isc_info_sql_select = 4;

const int isc_info_sql_bind = 5;

const int isc_info_sql_num_variables = 6;

const int isc_info_sql_describe_vars = 7;

const int isc_info_sql_describe_end = 8;

const int isc_info_sql_sqlda_seq = 9;

const int isc_info_sql_message_seq = 10;

const int isc_info_sql_type = 11;

const int isc_info_sql_sub_type = 12;

const int isc_info_sql_scale = 13;

const int isc_info_sql_length = 14;

const int isc_info_sql_null_ind = 15;

const int isc_info_sql_field = 16;

const int isc_info_sql_relation = 17;

const int isc_info_sql_owner = 18;

const int isc_info_sql_alias = 19;

const int isc_info_sql_sqlda_start = 20;

const int isc_info_sql_stmt_type = 21;

const int isc_info_sql_get_plan = 22;

const int isc_info_sql_records = 23;

const int isc_info_sql_batch_fetch = 24;

const int isc_info_sql_relation_alias = 25;

const int isc_info_sql_explain_plan = 26;

const int isc_info_sql_stmt_flags = 27;

const int isc_info_sql_stmt_select = 1;

const int isc_info_sql_stmt_insert = 2;

const int isc_info_sql_stmt_update = 3;

const int isc_info_sql_stmt_delete = 4;

const int isc_info_sql_stmt_ddl = 5;

const int isc_info_sql_stmt_get_segment = 6;

const int isc_info_sql_stmt_put_segment = 7;

const int isc_info_sql_stmt_exec_procedure = 8;

const int isc_info_sql_stmt_start_trans = 9;

const int isc_info_sql_stmt_commit = 10;

const int isc_info_sql_stmt_rollback = 11;

const int isc_info_sql_stmt_select_for_upd = 12;

const int isc_info_sql_stmt_set_generator = 13;

const int isc_info_sql_stmt_savepoint = 14;

const int isc_facility = 20;

const int isc_base = 335544320;

const int isc_factor = 1;

const int isc_arg_end = 0;

const int isc_arg_gds = 1;

const int isc_arg_string = 2;

const int isc_arg_cstring = 3;

const int isc_arg_number = 4;

const int isc_arg_interpreted = 5;

const int isc_arg_vms = 6;

const int isc_arg_unix = 7;

const int isc_arg_domain = 8;

const int isc_arg_dos = 9;

const int isc_arg_mpexl = 10;

const int isc_arg_mpexl_ipc = 11;

const int isc_arg_next_mach = 15;

const int isc_arg_netware = 16;

const int isc_arg_win32 = 17;

const int isc_arg_warning = 18;

const int isc_arg_sql_state = 19;

const int isc_arith_except = 335544321;

const int isc_bad_dbkey = 335544322;

const int isc_bad_db_format = 335544323;

const int isc_bad_db_handle = 335544324;

const int isc_bad_dpb_content = 335544325;

const int isc_bad_dpb_form = 335544326;

const int isc_bad_req_handle = 335544327;

const int isc_bad_segstr_handle = 335544328;

const int isc_bad_segstr_id = 335544329;

const int isc_bad_tpb_content = 335544330;

const int isc_bad_tpb_form = 335544331;

const int isc_bad_trans_handle = 335544332;

const int isc_bug_check = 335544333;

const int isc_convert_error = 335544334;

const int isc_db_corrupt = 335544335;

const int isc_deadlock = 335544336;

const int isc_excess_trans = 335544337;

const int isc_from_no_match = 335544338;

const int isc_infinap = 335544339;

const int isc_infona = 335544340;

const int isc_infunk = 335544341;

const int isc_integ_fail = 335544342;

const int isc_invalid_blr = 335544343;

const int isc_io_error = 335544344;

const int isc_lock_conflict = 335544345;

const int isc_metadata_corrupt = 335544346;

const int isc_not_valid = 335544347;

const int isc_no_cur_rec = 335544348;

const int isc_no_dup = 335544349;

const int isc_no_finish = 335544350;

const int isc_no_meta_update = 335544351;

const int isc_no_priv = 335544352;

const int isc_no_recon = 335544353;

const int isc_no_record = 335544354;

const int isc_no_segstr_close = 335544355;

const int isc_obsolete_metadata = 335544356;

const int isc_open_trans = 335544357;

const int isc_port_len = 335544358;

const int isc_read_only_field = 335544359;

const int isc_read_only_rel = 335544360;

const int isc_read_only_trans = 335544361;

const int isc_read_only_view = 335544362;

const int isc_req_no_trans = 335544363;

const int isc_req_sync = 335544364;

const int isc_req_wrong_db = 335544365;

const int isc_segment = 335544366;

const int isc_segstr_eof = 335544367;

const int isc_segstr_no_op = 335544368;

const int isc_segstr_no_read = 335544369;

const int isc_segstr_no_trans = 335544370;

const int isc_segstr_no_write = 335544371;

const int isc_segstr_wrong_db = 335544372;

const int isc_sys_request = 335544373;

const int isc_stream_eof = 335544374;

const int isc_unavailable = 335544375;

const int isc_unres_rel = 335544376;

const int isc_uns_ext = 335544377;

const int isc_wish_list = 335544378;

const int isc_wrong_ods = 335544379;

const int isc_wronumarg = 335544380;

const int isc_imp_exc = 335544381;

const int isc_random = 335544382;

const int isc_fatal_conflict = 335544383;

const int isc_badblk = 335544384;

const int isc_invpoolcl = 335544385;

const int isc_nopoolids = 335544386;

const int isc_relbadblk = 335544387;

const int isc_blktoobig = 335544388;

const int isc_bufexh = 335544389;

const int isc_syntaxerr = 335544390;

const int isc_bufinuse = 335544391;

const int isc_bdbincon = 335544392;

const int isc_reqinuse = 335544393;

const int isc_badodsver = 335544394;

const int isc_relnotdef = 335544395;

const int isc_fldnotdef = 335544396;

const int isc_dirtypage = 335544397;

const int isc_waifortra = 335544398;

const int isc_doubleloc = 335544399;

const int isc_nodnotfnd = 335544400;

const int isc_dupnodfnd = 335544401;

const int isc_locnotmar = 335544402;

const int isc_badpagtyp = 335544403;

const int isc_corrupt = 335544404;

const int isc_badpage = 335544405;

const int isc_badindex = 335544406;

const int isc_dbbnotzer = 335544407;

const int isc_tranotzer = 335544408;

const int isc_trareqmis = 335544409;

const int isc_badhndcnt = 335544410;

const int isc_wrotpbver = 335544411;

const int isc_wroblrver = 335544412;

const int isc_wrodpbver = 335544413;

const int isc_blobnotsup = 335544414;

const int isc_badrelation = 335544415;

const int isc_nodetach = 335544416;

const int isc_notremote = 335544417;

const int isc_trainlim = 335544418;

const int isc_notinlim = 335544419;

const int isc_traoutsta = 335544420;

const int isc_connect_reject = 335544421;

const int isc_dbfile = 335544422;

const int isc_orphan = 335544423;

const int isc_no_lock_mgr = 335544424;

const int isc_ctxinuse = 335544425;

const int isc_ctxnotdef = 335544426;

const int isc_datnotsup = 335544427;

const int isc_badmsgnum = 335544428;

const int isc_badparnum = 335544429;

const int isc_virmemexh = 335544430;

const int isc_blocking_signal = 335544431;

const int isc_lockmanerr = 335544432;

const int isc_journerr = 335544433;

const int isc_keytoobig = 335544434;

const int isc_nullsegkey = 335544435;

const int isc_sqlerr = 335544436;

const int isc_wrodynver = 335544437;

const int isc_funnotdef = 335544438;

const int isc_funmismat = 335544439;

const int isc_bad_msg_vec = 335544440;

const int isc_bad_detach = 335544441;

const int isc_noargacc_read = 335544442;

const int isc_noargacc_write = 335544443;

const int isc_read_only = 335544444;

const int isc_ext_err = 335544445;

const int isc_non_updatable = 335544446;

const int isc_no_rollback = 335544447;

const int isc_bad_sec_info = 335544448;

const int isc_invalid_sec_info = 335544449;

const int isc_misc_interpreted = 335544450;

const int isc_update_conflict = 335544451;

const int isc_unlicensed = 335544452;

const int isc_obj_in_use = 335544453;

const int isc_nofilter = 335544454;

const int isc_shadow_accessed = 335544455;

const int isc_invalid_sdl = 335544456;

const int isc_out_of_bounds = 335544457;

const int isc_invalid_dimension = 335544458;

const int isc_rec_in_limbo = 335544459;

const int isc_shadow_missing = 335544460;

const int isc_cant_validate = 335544461;

const int isc_cant_start_journal = 335544462;

const int isc_gennotdef = 335544463;

const int isc_cant_start_logging = 335544464;

const int isc_bad_segstr_type = 335544465;

const int isc_foreign_key = 335544466;

const int isc_high_minor = 335544467;

const int isc_tra_state = 335544468;

const int isc_trans_invalid = 335544469;

const int isc_buf_invalid = 335544470;

const int isc_indexnotdefined = 335544471;

const int isc_login = 335544472;

const int isc_invalid_bookmark = 335544473;

const int isc_bad_lock_level = 335544474;

const int isc_relation_lock = 335544475;

const int isc_record_lock = 335544476;

const int isc_max_idx = 335544477;

const int isc_jrn_enable = 335544478;

const int isc_old_failure = 335544479;

const int isc_old_in_progress = 335544480;

const int isc_old_no_space = 335544481;

const int isc_no_wal_no_jrn = 335544482;

const int isc_num_old_files = 335544483;

const int isc_wal_file_open = 335544484;

const int isc_bad_stmt_handle = 335544485;

const int isc_wal_failure = 335544486;

const int isc_walw_err = 335544487;

const int isc_logh_small = 335544488;

const int isc_logh_inv_version = 335544489;

const int isc_logh_open_flag = 335544490;

const int isc_logh_open_flag2 = 335544491;

const int isc_logh_diff_dbname = 335544492;

const int isc_logf_unexpected_eof = 335544493;

const int isc_logr_incomplete = 335544494;

const int isc_logr_header_small = 335544495;

const int isc_logb_small = 335544496;

const int isc_wal_illegal_attach = 335544497;

const int isc_wal_invalid_wpb = 335544498;

const int isc_wal_err_rollover = 335544499;

const int isc_no_wal = 335544500;

const int isc_drop_wal = 335544501;

const int isc_stream_not_defined = 335544502;

const int isc_wal_subsys_error = 335544503;

const int isc_wal_subsys_corrupt = 335544504;

const int isc_no_archive = 335544505;

const int isc_shutinprog = 335544506;

const int isc_range_in_use = 335544507;

const int isc_range_not_found = 335544508;

const int isc_charset_not_found = 335544509;

const int isc_lock_timeout = 335544510;

const int isc_prcnotdef = 335544511;

const int isc_prcmismat = 335544512;

const int isc_wal_bugcheck = 335544513;

const int isc_wal_cant_expand = 335544514;

const int isc_codnotdef = 335544515;

const int isc_xcpnotdef = 335544516;

const int isc_except = 335544517;

const int isc_cache_restart = 335544518;

const int isc_bad_lock_handle = 335544519;

const int isc_jrn_present = 335544520;

const int isc_wal_err_rollover2 = 335544521;

const int isc_wal_err_logwrite = 335544522;

const int isc_wal_err_jrn_comm = 335544523;

const int isc_wal_err_expansion = 335544524;

const int isc_wal_err_setup = 335544525;

const int isc_wal_err_ww_sync = 335544526;

const int isc_wal_err_ww_start = 335544527;

const int isc_shutdown = 335544528;

const int isc_existing_priv_mod = 335544529;

const int isc_primary_key_ref = 335544530;

const int isc_primary_key_notnull = 335544531;

const int isc_ref_cnstrnt_notfound = 335544532;

const int isc_foreign_key_notfound = 335544533;

const int isc_ref_cnstrnt_update = 335544534;

const int isc_check_cnstrnt_update = 335544535;

const int isc_check_cnstrnt_del = 335544536;

const int isc_integ_index_seg_del = 335544537;

const int isc_integ_index_seg_mod = 335544538;

const int isc_integ_index_del = 335544539;

const int isc_integ_index_mod = 335544540;

const int isc_check_trig_del = 335544541;

const int isc_check_trig_update = 335544542;

const int isc_cnstrnt_fld_del = 335544543;

const int isc_cnstrnt_fld_rename = 335544544;

const int isc_rel_cnstrnt_update = 335544545;

const int isc_constaint_on_view = 335544546;

const int isc_invld_cnstrnt_type = 335544547;

const int isc_primary_key_exists = 335544548;

const int isc_systrig_update = 335544549;

const int isc_not_rel_owner = 335544550;

const int isc_grant_obj_notfound = 335544551;

const int isc_grant_fld_notfound = 335544552;

const int isc_grant_nopriv = 335544553;

const int isc_nonsql_security_rel = 335544554;

const int isc_nonsql_security_fld = 335544555;

const int isc_wal_cache_err = 335544556;

const int isc_shutfail = 335544557;

const int isc_check_constraint = 335544558;

const int isc_bad_svc_handle = 335544559;

const int isc_shutwarn = 335544560;

const int isc_wrospbver = 335544561;

const int isc_bad_spb_form = 335544562;

const int isc_svcnotdef = 335544563;

const int isc_no_jrn = 335544564;

const int isc_transliteration_failed = 335544565;

const int isc_start_cm_for_wal = 335544566;

const int isc_wal_ovflow_log_required = 335544567;

const int isc_text_subtype = 335544568;

const int isc_dsql_error = 335544569;

const int isc_dsql_command_err = 335544570;

const int isc_dsql_constant_err = 335544571;

const int isc_dsql_cursor_err = 335544572;

const int isc_dsql_datatype_err = 335544573;

const int isc_dsql_decl_err = 335544574;

const int isc_dsql_cursor_update_err = 335544575;

const int isc_dsql_cursor_open_err = 335544576;

const int isc_dsql_cursor_close_err = 335544577;

const int isc_dsql_field_err = 335544578;

const int isc_dsql_internal_err = 335544579;

const int isc_dsql_relation_err = 335544580;

const int isc_dsql_procedure_err = 335544581;

const int isc_dsql_request_err = 335544582;

const int isc_dsql_sqlda_err = 335544583;

const int isc_dsql_var_count_err = 335544584;

const int isc_dsql_stmt_handle = 335544585;

const int isc_dsql_function_err = 335544586;

const int isc_dsql_blob_err = 335544587;

const int isc_collation_not_found = 335544588;

const int isc_collation_not_for_charset = 335544589;

const int isc_dsql_dup_option = 335544590;

const int isc_dsql_tran_err = 335544591;

const int isc_dsql_invalid_array = 335544592;

const int isc_dsql_max_arr_dim_exceeded = 335544593;

const int isc_dsql_arr_range_error = 335544594;

const int isc_dsql_trigger_err = 335544595;

const int isc_dsql_subselect_err = 335544596;

const int isc_dsql_crdb_prepare_err = 335544597;

const int isc_specify_field_err = 335544598;

const int isc_num_field_err = 335544599;

const int isc_col_name_err = 335544600;

const int isc_where_err = 335544601;

const int isc_table_view_err = 335544602;

const int isc_distinct_err = 335544603;

const int isc_key_field_count_err = 335544604;

const int isc_subquery_err = 335544605;

const int isc_expression_eval_err = 335544606;

const int isc_node_err = 335544607;

const int isc_command_end_err = 335544608;

const int isc_index_name = 335544609;

const int isc_exception_name = 335544610;

const int isc_field_name = 335544611;

const int isc_token_err = 335544612;

const int isc_union_err = 335544613;

const int isc_dsql_construct_err = 335544614;

const int isc_field_aggregate_err = 335544615;

const int isc_field_ref_err = 335544616;

const int isc_order_by_err = 335544617;

const int isc_return_mode_err = 335544618;

const int isc_extern_func_err = 335544619;

const int isc_alias_conflict_err = 335544620;

const int isc_procedure_conflict_error = 335544621;

const int isc_relation_conflict_err = 335544622;

const int isc_dsql_domain_err = 335544623;

const int isc_idx_seg_err = 335544624;

const int isc_node_name_err = 335544625;

const int isc_table_name = 335544626;

const int isc_proc_name = 335544627;

const int isc_idx_create_err = 335544628;

const int isc_wal_shadow_err = 335544629;

const int isc_dependency = 335544630;

const int isc_idx_key_err = 335544631;

const int isc_dsql_file_length_err = 335544632;

const int isc_dsql_shadow_number_err = 335544633;

const int isc_dsql_token_unk_err = 335544634;

const int isc_dsql_no_relation_alias = 335544635;

const int isc_indexname = 335544636;

const int isc_no_stream_plan = 335544637;

const int isc_stream_twice = 335544638;

const int isc_stream_not_found = 335544639;

const int isc_collation_requires_text = 335544640;

const int isc_dsql_domain_not_found = 335544641;

const int isc_index_unused = 335544642;

const int isc_dsql_self_join = 335544643;

const int isc_stream_bof = 335544644;

const int isc_stream_crack = 335544645;

const int isc_db_or_file_exists = 335544646;

const int isc_invalid_operator = 335544647;

const int isc_conn_lost = 335544648;

const int isc_bad_checksum = 335544649;

const int isc_page_type_err = 335544650;

const int isc_ext_readonly_err = 335544651;

const int isc_sing_select_err = 335544652;

const int isc_psw_attach = 335544653;

const int isc_psw_start_trans = 335544654;

const int isc_invalid_direction = 335544655;

const int isc_dsql_var_conflict = 335544656;

const int isc_dsql_no_blob_array = 335544657;

const int isc_dsql_base_table = 335544658;

const int isc_duplicate_base_table = 335544659;

const int isc_view_alias = 335544660;

const int isc_index_root_page_full = 335544661;

const int isc_dsql_blob_type_unknown = 335544662;

const int isc_req_max_clones_exceeded = 335544663;

const int isc_dsql_duplicate_spec = 335544664;

const int isc_unique_key_violation = 335544665;

const int isc_srvr_version_too_old = 335544666;

const int isc_drdb_completed_with_errs = 335544667;

const int isc_dsql_procedure_use_err = 335544668;

const int isc_dsql_count_mismatch = 335544669;

const int isc_blob_idx_err = 335544670;

const int isc_array_idx_err = 335544671;

const int isc_key_field_err = 335544672;

const int isc_no_delete = 335544673;

const int isc_del_last_field = 335544674;

const int isc_sort_err = 335544675;

const int isc_sort_mem_err = 335544676;

const int isc_version_err = 335544677;

const int isc_inval_key_posn = 335544678;

const int isc_no_segments_err = 335544679;

const int isc_crrp_data_err = 335544680;

const int isc_rec_size_err = 335544681;

const int isc_dsql_field_ref = 335544682;

const int isc_req_depth_exceeded = 335544683;

const int isc_no_field_access = 335544684;

const int isc_no_dbkey = 335544685;

const int isc_jrn_format_err = 335544686;

const int isc_jrn_file_full = 335544687;

const int isc_dsql_open_cursor_request = 335544688;

const int isc_ib_error = 335544689;

const int isc_cache_redef = 335544690;

const int isc_cache_too_small = 335544691;

const int isc_log_redef = 335544692;

const int isc_log_too_small = 335544693;

const int isc_partition_too_small = 335544694;

const int isc_partition_not_supp = 335544695;

const int isc_log_length_spec = 335544696;

const int isc_precision_err = 335544697;

const int isc_scale_nogt = 335544698;

const int isc_expec_short = 335544699;

const int isc_expec_long = 335544700;

const int isc_expec_ushort = 335544701;

const int isc_escape_invalid = 335544702;

const int isc_svcnoexe = 335544703;

const int isc_net_lookup_err = 335544704;

const int isc_service_unknown = 335544705;

const int isc_host_unknown = 335544706;

const int isc_grant_nopriv_on_base = 335544707;

const int isc_dyn_fld_ambiguous = 335544708;

const int isc_dsql_agg_ref_err = 335544709;

const int isc_complex_view = 335544710;

const int isc_unprepared_stmt = 335544711;

const int isc_expec_positive = 335544712;

const int isc_dsql_sqlda_value_err = 335544713;

const int isc_invalid_array_id = 335544714;

const int isc_extfile_uns_op = 335544715;

const int isc_svc_in_use = 335544716;

const int isc_err_stack_limit = 335544717;

const int isc_invalid_key = 335544718;

const int isc_net_init_error = 335544719;

const int isc_loadlib_failure = 335544720;

const int isc_network_error = 335544721;

const int isc_net_connect_err = 335544722;

const int isc_net_connect_listen_err = 335544723;

const int isc_net_event_connect_err = 335544724;

const int isc_net_event_listen_err = 335544725;

const int isc_net_read_err = 335544726;

const int isc_net_write_err = 335544727;

const int isc_integ_index_deactivate = 335544728;

const int isc_integ_deactivate_primary = 335544729;

const int isc_cse_not_supported = 335544730;

const int isc_tra_must_sweep = 335544731;

const int isc_unsupported_network_drive = 335544732;

const int isc_io_create_err = 335544733;

const int isc_io_open_err = 335544734;

const int isc_io_close_err = 335544735;

const int isc_io_read_err = 335544736;

const int isc_io_write_err = 335544737;

const int isc_io_delete_err = 335544738;

const int isc_io_access_err = 335544739;

const int isc_udf_exception = 335544740;

const int isc_lost_db_connection = 335544741;

const int isc_no_write_user_priv = 335544742;

const int isc_token_too_long = 335544743;

const int isc_max_att_exceeded = 335544744;

const int isc_login_same_as_role_name = 335544745;

const int isc_reftable_requires_pk = 335544746;

const int isc_usrname_too_long = 335544747;

const int isc_password_too_long = 335544748;

const int isc_usrname_required = 335544749;

const int isc_password_required = 335544750;

const int isc_bad_protocol = 335544751;

const int isc_dup_usrname_found = 335544752;

const int isc_usrname_not_found = 335544753;

const int isc_error_adding_sec_record = 335544754;

const int isc_error_modifying_sec_record = 335544755;

const int isc_error_deleting_sec_record = 335544756;

const int isc_error_updating_sec_db = 335544757;

const int isc_sort_rec_size_err = 335544758;

const int isc_bad_default_value = 335544759;

const int isc_invalid_clause = 335544760;

const int isc_too_many_handles = 335544761;

const int isc_optimizer_blk_exc = 335544762;

const int isc_invalid_string_constant = 335544763;

const int isc_transitional_date = 335544764;

const int isc_read_only_database = 335544765;

const int isc_must_be_dialect_2_and_up = 335544766;

const int isc_blob_filter_exception = 335544767;

const int isc_exception_access_violation = 335544768;

const int isc_exception_datatype_missalignment = 335544769;

const int isc_exception_array_bounds_exceeded = 335544770;

const int isc_exception_float_denormal_operand = 335544771;

const int isc_exception_float_divide_by_zero = 335544772;

const int isc_exception_float_inexact_result = 335544773;

const int isc_exception_float_invalid_operand = 335544774;

const int isc_exception_float_overflow = 335544775;

const int isc_exception_float_stack_check = 335544776;

const int isc_exception_float_underflow = 335544777;

const int isc_exception_integer_divide_by_zero = 335544778;

const int isc_exception_integer_overflow = 335544779;

const int isc_exception_unknown = 335544780;

const int isc_exception_stack_overflow = 335544781;

const int isc_exception_sigsegv = 335544782;

const int isc_exception_sigill = 335544783;

const int isc_exception_sigbus = 335544784;

const int isc_exception_sigfpe = 335544785;

const int isc_ext_file_delete = 335544786;

const int isc_ext_file_modify = 335544787;

const int isc_adm_task_denied = 335544788;

const int isc_extract_input_mismatch = 335544789;

const int isc_insufficient_svc_privileges = 335544790;

const int isc_file_in_use = 335544791;

const int isc_service_att_err = 335544792;

const int isc_ddl_not_allowed_by_db_sql_dial = 335544793;

const int isc_cancelled = 335544794;

const int isc_unexp_spb_form = 335544795;

const int isc_sql_dialect_datatype_unsupport = 335544796;

const int isc_svcnouser = 335544797;

const int isc_depend_on_uncommitted_rel = 335544798;

const int isc_svc_name_missing = 335544799;

const int isc_too_many_contexts = 335544800;

const int isc_datype_notsup = 335544801;

const int isc_dialect_reset_warning = 335544802;

const int isc_dialect_not_changed = 335544803;

const int isc_database_create_failed = 335544804;

const int isc_inv_dialect_specified = 335544805;

const int isc_valid_db_dialects = 335544806;

const int isc_sqlwarn = 335544807;

const int isc_dtype_renamed = 335544808;

const int isc_extern_func_dir_error = 335544809;

const int isc_date_range_exceeded = 335544810;

const int isc_inv_client_dialect_specified = 335544811;

const int isc_valid_client_dialects = 335544812;

const int isc_optimizer_between_err = 335544813;

const int isc_service_not_supported = 335544814;

const int isc_generator_name = 335544815;

const int isc_udf_name = 335544816;

const int isc_bad_limit_param = 335544817;

const int isc_bad_skip_param = 335544818;

const int isc_io_32bit_exceeded_err = 335544819;

const int isc_invalid_savepoint = 335544820;

const int isc_dsql_column_pos_err = 335544821;

const int isc_dsql_agg_where_err = 335544822;

const int isc_dsql_agg_group_err = 335544823;

const int isc_dsql_agg_column_err = 335544824;

const int isc_dsql_agg_having_err = 335544825;

const int isc_dsql_agg_nested_err = 335544826;

const int isc_exec_sql_invalid_arg = 335544827;

const int isc_exec_sql_invalid_req = 335544828;

const int isc_exec_sql_invalid_var = 335544829;

const int isc_exec_sql_max_call_exceeded = 335544830;

const int isc_conf_access_denied = 335544831;

const int isc_wrong_backup_state = 335544832;

const int isc_wal_backup_err = 335544833;

const int isc_cursor_not_open = 335544834;

const int isc_bad_shutdown_mode = 335544835;

const int isc_concat_overflow = 335544836;

const int isc_bad_substring_offset = 335544837;

const int isc_foreign_key_target_doesnt_exist = 335544838;

const int isc_foreign_key_references_present = 335544839;

const int isc_no_update = 335544840;

const int isc_cursor_already_open = 335544841;

const int isc_stack_trace = 335544842;

const int isc_ctx_var_not_found = 335544843;

const int isc_ctx_namespace_invalid = 335544844;

const int isc_ctx_too_big = 335544845;

const int isc_ctx_bad_argument = 335544846;

const int isc_identifier_too_long = 335544847;

const int isc_except2 = 335544848;

const int isc_malformed_string = 335544849;

const int isc_prc_out_param_mismatch = 335544850;

const int isc_command_end_err2 = 335544851;

const int isc_partner_idx_incompat_type = 335544852;

const int isc_bad_substring_length = 335544853;

const int isc_charset_not_installed = 335544854;

const int isc_collation_not_installed = 335544855;

const int isc_att_shutdown = 335544856;

const int isc_blobtoobig = 335544857;

const int isc_must_have_phys_field = 335544858;

const int isc_invalid_time_precision = 335544859;

const int isc_blob_convert_error = 335544860;

const int isc_array_convert_error = 335544861;

const int isc_record_lock_not_supp = 335544862;

const int isc_partner_idx_not_found = 335544863;

const int isc_tra_num_exc = 335544864;

const int isc_field_disappeared = 335544865;

const int isc_met_wrong_gtt_scope = 335544866;

const int isc_subtype_for_internal_use = 335544867;

const int isc_illegal_prc_type = 335544868;

const int isc_invalid_sort_datatype = 335544869;

const int isc_collation_name = 335544870;

const int isc_domain_name = 335544871;

const int isc_domnotdef = 335544872;

const int isc_array_max_dimensions = 335544873;

const int isc_max_db_per_trans_allowed = 335544874;

const int isc_bad_debug_format = 335544875;

const int isc_bad_proc_BLR = 335544876;

const int isc_key_too_big = 335544877;

const int isc_concurrent_transaction = 335544878;

const int isc_not_valid_for_var = 335544879;

const int isc_not_valid_for = 335544880;

const int isc_need_difference = 335544881;

const int isc_long_login = 335544882;

const int isc_fldnotdef2 = 335544883;

const int isc_invalid_similar_pattern = 335544884;

const int isc_bad_teb_form = 335544885;

const int isc_tpb_multiple_txn_isolation = 335544886;

const int isc_tpb_reserv_before_table = 335544887;

const int isc_tpb_multiple_spec = 335544888;

const int isc_tpb_option_without_rc = 335544889;

const int isc_tpb_conflicting_options = 335544890;

const int isc_tpb_reserv_missing_tlen = 335544891;

const int isc_tpb_reserv_long_tlen = 335544892;

const int isc_tpb_reserv_missing_tname = 335544893;

const int isc_tpb_reserv_corrup_tlen = 335544894;

const int isc_tpb_reserv_null_tlen = 335544895;

const int isc_tpb_reserv_relnotfound = 335544896;

const int isc_tpb_reserv_baserelnotfound = 335544897;

const int isc_tpb_missing_len = 335544898;

const int isc_tpb_missing_value = 335544899;

const int isc_tpb_corrupt_len = 335544900;

const int isc_tpb_null_len = 335544901;

const int isc_tpb_overflow_len = 335544902;

const int isc_tpb_invalid_value = 335544903;

const int isc_tpb_reserv_stronger_wng = 335544904;

const int isc_tpb_reserv_stronger = 335544905;

const int isc_tpb_reserv_max_recursion = 335544906;

const int isc_tpb_reserv_virtualtbl = 335544907;

const int isc_tpb_reserv_systbl = 335544908;

const int isc_tpb_reserv_temptbl = 335544909;

const int isc_tpb_readtxn_after_writelock = 335544910;

const int isc_tpb_writelock_after_readtxn = 335544911;

const int isc_time_range_exceeded = 335544912;

const int isc_datetime_range_exceeded = 335544913;

const int isc_string_truncation = 335544914;

const int isc_blob_truncation = 335544915;

const int isc_numeric_out_of_range = 335544916;

const int isc_shutdown_timeout = 335544917;

const int isc_att_handle_busy = 335544918;

const int isc_bad_udf_freeit = 335544919;

const int isc_eds_provider_not_found = 335544920;

const int isc_eds_connection = 335544921;

const int isc_eds_preprocess = 335544922;

const int isc_eds_stmt_expected = 335544923;

const int isc_eds_prm_name_expected = 335544924;

const int isc_eds_unclosed_comment = 335544925;

const int isc_eds_statement = 335544926;

const int isc_eds_input_prm_mismatch = 335544927;

const int isc_eds_output_prm_mismatch = 335544928;

const int isc_eds_input_prm_not_set = 335544929;

const int isc_too_big_blr = 335544930;

const int isc_montabexh = 335544931;

const int isc_modnotfound = 335544932;

const int isc_nothing_to_cancel = 335544933;

const int isc_ibutil_not_loaded = 335544934;

const int isc_circular_computed = 335544935;

const int isc_psw_db_error = 335544936;

const int isc_invalid_type_datetime_op = 335544937;

const int isc_onlycan_add_timetodate = 335544938;

const int isc_onlycan_add_datetotime = 335544939;

const int isc_onlycansub_tstampfromtstamp = 335544940;

const int isc_onlyoneop_mustbe_tstamp = 335544941;

const int isc_invalid_extractpart_time = 335544942;

const int isc_invalid_extractpart_date = 335544943;

const int isc_invalidarg_extract = 335544944;

const int isc_sysf_argmustbe_exact = 335544945;

const int isc_sysf_argmustbe_exact_or_fp = 335544946;

const int isc_sysf_argviolates_uuidtype = 335544947;

const int isc_sysf_argviolates_uuidlen = 335544948;

const int isc_sysf_argviolates_uuidfmt = 335544949;

const int isc_sysf_argviolates_guidigits = 335544950;

const int isc_sysf_invalid_addpart_time = 335544951;

const int isc_sysf_invalid_add_datetime = 335544952;

const int isc_sysf_invalid_addpart_dtime = 335544953;

const int isc_sysf_invalid_add_dtime_rc = 335544954;

const int isc_sysf_invalid_diff_dtime = 335544955;

const int isc_sysf_invalid_timediff = 335544956;

const int isc_sysf_invalid_tstamptimediff = 335544957;

const int isc_sysf_invalid_datetimediff = 335544958;

const int isc_sysf_invalid_diffpart = 335544959;

const int isc_sysf_argmustbe_positive = 335544960;

const int isc_sysf_basemustbe_positive = 335544961;

const int isc_sysf_argnmustbe_nonneg = 335544962;

const int isc_sysf_argnmustbe_positive = 335544963;

const int isc_sysf_invalid_zeropowneg = 335544964;

const int isc_sysf_invalid_negpowfp = 335544965;

const int isc_sysf_invalid_scale = 335544966;

const int isc_sysf_argmustbe_nonneg = 335544967;

const int isc_sysf_binuuid_mustbe_str = 335544968;

const int isc_sysf_binuuid_wrongsize = 335544969;

const int isc_missing_required_spb = 335544970;

const int isc_net_server_shutdown = 335544971;

const int isc_bad_conn_str = 335544972;

const int isc_bad_epb_form = 335544973;

const int isc_no_threads = 335544974;

const int isc_net_event_connect_timeout = 335544975;

const int isc_sysf_argmustbe_nonzero = 335544976;

const int isc_sysf_argmustbe_range_inc1_1 = 335544977;

const int isc_sysf_argmustbe_gteq_one = 335544978;

const int isc_sysf_argmustbe_range_exc1_1 = 335544979;

const int isc_internal_rejected_params = 335544980;

const int isc_sysf_fp_overflow = 335544981;

const int isc_udf_fp_overflow = 335544982;

const int isc_udf_fp_nan = 335544983;

const int isc_instance_conflict = 335544984;

const int isc_out_of_temp_space = 335544985;

const int isc_eds_expl_tran_ctrl = 335544986;

const int isc_no_trusted_spb = 335544987;

const int isc_package_name = 335544988;

const int isc_cannot_make_not_null = 335544989;

const int isc_feature_removed = 335544990;

const int isc_view_name = 335544991;

const int isc_lock_dir_access = 335544992;

const int isc_invalid_fetch_option = 335544993;

const int isc_bad_fun_BLR = 335544994;

const int isc_func_pack_not_implemented = 335544995;

const int isc_proc_pack_not_implemented = 335544996;

const int isc_eem_func_not_returned = 335544997;

const int isc_eem_proc_not_returned = 335544998;

const int isc_eem_trig_not_returned = 335544999;

const int isc_eem_bad_plugin_ver = 335545000;

const int isc_eem_engine_notfound = 335545001;

const int isc_attachment_in_use = 335545002;

const int isc_transaction_in_use = 335545003;

const int isc_pman_cannot_load_plugin = 335545004;

const int isc_pman_module_notfound = 335545005;

const int isc_pman_entrypoint_notfound = 335545006;

const int isc_pman_module_bad = 335545007;

const int isc_pman_plugin_notfound = 335545008;

const int isc_sysf_invalid_trig_namespace = 335545009;

const int isc_unexpected_null = 335545010;

const int isc_type_notcompat_blob = 335545011;

const int isc_invalid_date_val = 335545012;

const int isc_invalid_time_val = 335545013;

const int isc_invalid_timestamp_val = 335545014;

const int isc_invalid_index_val = 335545015;

const int isc_formatted_exception = 335545016;

const int isc_async_active = 335545017;

const int isc_private_function = 335545018;

const int isc_private_procedure = 335545019;

const int isc_request_outdated = 335545020;

const int isc_bad_events_handle = 335545021;

const int isc_cannot_copy_stmt = 335545022;

const int isc_invalid_boolean_usage = 335545023;

const int isc_sysf_argscant_both_be_zero = 335545024;

const int isc_spb_no_id = 335545025;

const int isc_ee_blr_mismatch_null = 335545026;

const int isc_ee_blr_mismatch_length = 335545027;

const int isc_ss_out_of_bounds = 335545028;

const int isc_missing_data_structures = 335545029;

const int isc_protect_sys_tab = 335545030;

const int isc_libtommath_generic = 335545031;

const int isc_wroblrver2 = 335545032;

const int isc_trunc_limits = 335545033;

const int isc_info_access = 335545034;

const int isc_svc_no_stdin = 335545035;

const int isc_svc_start_failed = 335545036;

const int isc_svc_no_switches = 335545037;

const int isc_svc_bad_size = 335545038;

const int isc_no_crypt_plugin = 335545039;

const int isc_cp_name_too_long = 335545040;

const int isc_cp_process_active = 335545041;

const int isc_cp_already_crypted = 335545042;

const int isc_decrypt_error = 335545043;

const int isc_no_providers = 335545044;

const int isc_null_spb = 335545045;

const int isc_max_args_exceeded = 335545046;

const int isc_ee_blr_mismatch_names_count = 335545047;

const int isc_ee_blr_mismatch_name_not_found = 335545048;

const int isc_bad_result_set = 335545049;

const int isc_wrong_message_length = 335545050;

const int isc_no_output_format = 335545051;

const int isc_item_finish = 335545052;

const int isc_miss_config = 335545053;

const int isc_conf_line = 335545054;

const int isc_conf_include = 335545055;

const int isc_include_depth = 335545056;

const int isc_include_miss = 335545057;

const int isc_protect_ownership = 335545058;

const int isc_badvarnum = 335545059;

const int isc_sec_context = 335545060;

const int isc_multi_segment = 335545061;

const int isc_login_changed = 335545062;

const int isc_auth_handshake_limit = 335545063;

const int isc_wirecrypt_incompatible = 335545064;

const int isc_miss_wirecrypt = 335545065;

const int isc_wirecrypt_key = 335545066;

const int isc_wirecrypt_plugin = 335545067;

const int isc_secdb_name = 335545068;

const int isc_auth_data = 335545069;

const int isc_auth_datalength = 335545070;

const int isc_info_unprepared_stmt = 335545071;

const int isc_idx_key_value = 335545072;

const int isc_forupdate_virtualtbl = 335545073;

const int isc_forupdate_systbl = 335545074;

const int isc_forupdate_temptbl = 335545075;

const int isc_cant_modify_sysobj = 335545076;

const int isc_server_misconfigured = 335545077;

const int isc_alter_role = 335545078;

const int isc_map_already_exists = 335545079;

const int isc_map_not_exists = 335545080;

const int isc_map_load = 335545081;

const int isc_map_aster = 335545082;

const int isc_map_multi = 335545083;

const int isc_map_undefined = 335545084;

const int isc_baddpb_damaged_mode = 335545085;

const int isc_baddpb_buffers_range = 335545086;

const int isc_baddpb_temp_buffers = 335545087;

const int isc_map_nodb = 335545088;

const int isc_map_notable = 335545089;

const int isc_miss_trusted_role = 335545090;

const int isc_set_invalid_role = 335545091;

const int isc_cursor_not_positioned = 335545092;

const int isc_dup_attribute = 335545093;

const int isc_dyn_no_priv = 335545094;

const int isc_dsql_cant_grant_option = 335545095;

const int isc_read_conflict = 335545096;

const int isc_crdb_load = 335545097;

const int isc_crdb_nodb = 335545098;

const int isc_crdb_notable = 335545099;

const int isc_interface_version_too_old = 335545100;

const int isc_fun_param_mismatch = 335545101;

const int isc_savepoint_backout_err = 335545102;

const int isc_domain_primary_key_notnull = 335545103;

const int isc_invalid_attachment_charset = 335545104;

const int isc_map_down = 335545105;

const int isc_login_error = 335545106;

const int isc_already_opened = 335545107;

const int isc_bad_crypt_key = 335545108;

const int isc_encrypt_error = 335545109;

const int isc_gfix_db_name = 335740929;

const int isc_gfix_invalid_sw = 335740930;

const int isc_gfix_incmp_sw = 335740932;

const int isc_gfix_replay_req = 335740933;

const int isc_gfix_pgbuf_req = 335740934;

const int isc_gfix_val_req = 335740935;

const int isc_gfix_pval_req = 335740936;

const int isc_gfix_trn_req = 335740937;

const int isc_gfix_full_req = 335740940;

const int isc_gfix_usrname_req = 335740941;

const int isc_gfix_pass_req = 335740942;

const int isc_gfix_subs_name = 335740943;

const int isc_gfix_wal_req = 335740944;

const int isc_gfix_sec_req = 335740945;

const int isc_gfix_nval_req = 335740946;

const int isc_gfix_type_shut = 335740947;

const int isc_gfix_retry = 335740948;

const int isc_gfix_retry_db = 335740951;

const int isc_gfix_exceed_max = 335740991;

const int isc_gfix_corrupt_pool = 335740992;

const int isc_gfix_mem_exhausted = 335740993;

const int isc_gfix_bad_pool = 335740994;

const int isc_gfix_trn_not_valid = 335740995;

const int isc_gfix_unexp_eoi = 335741012;

const int isc_gfix_recon_fail = 335741018;

const int isc_gfix_trn_unknown = 335741036;

const int isc_gfix_mode_req = 335741038;

const int isc_gfix_pzval_req = 335741042;

const int isc_dsql_dbkey_from_non_table = 336003074;

const int isc_dsql_transitional_numeric = 336003075;

const int isc_dsql_dialect_warning_expr = 336003076;

const int isc_sql_db_dialect_dtype_unsupport = 336003077;

const int isc_sql_dialect_conflict_num = 336003079;

const int isc_dsql_warning_number_ambiguous = 336003080;

const int isc_dsql_warning_number_ambiguous1 = 336003081;

const int isc_dsql_warn_precision_ambiguous = 336003082;

const int isc_dsql_warn_precision_ambiguous1 = 336003083;

const int isc_dsql_warn_precision_ambiguous2 = 336003084;

const int isc_dsql_ambiguous_field_name = 336003085;

const int isc_dsql_udf_return_pos_err = 336003086;

const int isc_dsql_invalid_label = 336003087;

const int isc_dsql_datatypes_not_comparable = 336003088;

const int isc_dsql_cursor_invalid = 336003089;

const int isc_dsql_cursor_redefined = 336003090;

const int isc_dsql_cursor_not_found = 336003091;

const int isc_dsql_cursor_exists = 336003092;

const int isc_dsql_cursor_rel_ambiguous = 336003093;

const int isc_dsql_cursor_rel_not_found = 336003094;

const int isc_dsql_cursor_not_open = 336003095;

const int isc_dsql_type_not_supp_ext_tab = 336003096;

const int isc_dsql_feature_not_supported_ods = 336003097;

const int isc_primary_key_required = 336003098;

const int isc_upd_ins_doesnt_match_pk = 336003099;

const int isc_upd_ins_doesnt_match_matching = 336003100;

const int isc_upd_ins_with_complex_view = 336003101;

const int isc_dsql_incompatible_trigger_type = 336003102;

const int isc_dsql_db_trigger_type_cant_change = 336003103;

const int isc_dsql_record_version_table = 336003104;

const int isc_dsql_invalid_sqlda_version = 336003105;

const int isc_dsql_sqlvar_index = 336003106;

const int isc_dsql_no_sqlind = 336003107;

const int isc_dsql_no_sqldata = 336003108;

const int isc_dsql_no_input_sqlda = 336003109;

const int isc_dsql_no_output_sqlda = 336003110;

const int isc_dsql_wrong_param_num = 336003111;

const int isc_dyn_filter_not_found = 336068645;

const int isc_dyn_func_not_found = 336068649;

const int isc_dyn_index_not_found = 336068656;

const int isc_dyn_view_not_found = 336068662;

const int isc_dyn_domain_not_found = 336068697;

const int isc_dyn_cant_modify_auto_trig = 336068717;

const int isc_dyn_dup_table = 336068740;

const int isc_dyn_proc_not_found = 336068748;

const int isc_dyn_exception_not_found = 336068752;

const int isc_dyn_proc_param_not_found = 336068754;

const int isc_dyn_trig_not_found = 336068755;

const int isc_dyn_charset_not_found = 336068759;

const int isc_dyn_collation_not_found = 336068760;

const int isc_dyn_role_not_found = 336068763;

const int isc_dyn_name_longer = 336068767;

const int isc_dyn_column_does_not_exist = 336068784;

const int isc_dyn_role_does_not_exist = 336068796;

const int isc_dyn_no_grant_admin_opt = 336068797;

const int isc_dyn_user_not_role_member = 336068798;

const int isc_dyn_delete_role_failed = 336068799;

const int isc_dyn_grant_role_to_user = 336068800;

const int isc_dyn_inv_sql_role_name = 336068801;

const int isc_dyn_dup_sql_role = 336068802;

const int isc_dyn_kywd_spec_for_role = 336068803;

const int isc_dyn_roles_not_supported = 336068804;

const int isc_dyn_domain_name_exists = 336068812;

const int isc_dyn_field_name_exists = 336068813;

const int isc_dyn_dependency_exists = 336068814;

const int isc_dyn_dtype_invalid = 336068815;

const int isc_dyn_char_fld_too_small = 336068816;

const int isc_dyn_invalid_dtype_conversion = 336068817;

const int isc_dyn_dtype_conv_invalid = 336068818;

const int isc_dyn_zero_len_id = 336068820;

const int isc_dyn_gen_not_found = 336068822;

const int isc_max_coll_per_charset = 336068829;

const int isc_invalid_coll_attr = 336068830;

const int isc_dyn_wrong_gtt_scope = 336068840;

const int isc_dyn_coll_used_table = 336068843;

const int isc_dyn_coll_used_domain = 336068844;

const int isc_dyn_cannot_del_syscoll = 336068845;

const int isc_dyn_cannot_del_def_coll = 336068846;

const int isc_dyn_table_not_found = 336068849;

const int isc_dyn_coll_used_procedure = 336068851;

const int isc_dyn_scale_too_big = 336068852;

const int isc_dyn_precision_too_small = 336068853;

const int isc_dyn_miss_priv_warning = 336068855;

const int isc_dyn_ods_not_supp_feature = 336068856;

const int isc_dyn_cannot_addrem_computed = 336068857;

const int isc_dyn_no_empty_pw = 336068858;

const int isc_dyn_dup_index = 336068859;

const int isc_dyn_package_not_found = 336068864;

const int isc_dyn_schema_not_found = 336068865;

const int isc_dyn_cannot_mod_sysproc = 336068866;

const int isc_dyn_cannot_mod_systrig = 336068867;

const int isc_dyn_cannot_mod_sysfunc = 336068868;

const int isc_dyn_invalid_ddl_proc = 336068869;

const int isc_dyn_invalid_ddl_trig = 336068870;

const int isc_dyn_funcnotdef_package = 336068871;

const int isc_dyn_procnotdef_package = 336068872;

const int isc_dyn_funcsignat_package = 336068873;

const int isc_dyn_procsignat_package = 336068874;

const int isc_dyn_defvaldecl_package_proc = 336068875;

const int isc_dyn_package_body_exists = 336068877;

const int isc_dyn_invalid_ddl_func = 336068878;

const int isc_dyn_newfc_oldsyntax = 336068879;

const int isc_dyn_func_param_not_found = 336068886;

const int isc_dyn_routine_param_not_found = 336068887;

const int isc_dyn_routine_param_ambiguous = 336068888;

const int isc_dyn_coll_used_function = 336068889;

const int isc_dyn_domain_used_function = 336068890;

const int isc_dyn_alter_user_no_clause = 336068891;

const int isc_dyn_duplicate_package_item = 336068894;

const int isc_dyn_cant_modify_sysobj = 336068895;

const int isc_dyn_cant_use_zero_increment = 336068896;

const int isc_dyn_cant_use_in_foreignkey = 336068897;

const int isc_dyn_defvaldecl_package_func = 336068898;

const int isc_gbak_unknown_switch = 336330753;

const int isc_gbak_page_size_missing = 336330754;

const int isc_gbak_page_size_toobig = 336330755;

const int isc_gbak_redir_ouput_missing = 336330756;

const int isc_gbak_switches_conflict = 336330757;

const int isc_gbak_unknown_device = 336330758;

const int isc_gbak_no_protection = 336330759;

const int isc_gbak_page_size_not_allowed = 336330760;

const int isc_gbak_multi_source_dest = 336330761;

const int isc_gbak_filename_missing = 336330762;

const int isc_gbak_dup_inout_names = 336330763;

const int isc_gbak_inv_page_size = 336330764;

const int isc_gbak_db_specified = 336330765;

const int isc_gbak_db_exists = 336330766;

const int isc_gbak_unk_device = 336330767;

const int isc_gbak_blob_info_failed = 336330772;

const int isc_gbak_unk_blob_item = 336330773;

const int isc_gbak_get_seg_failed = 336330774;

const int isc_gbak_close_blob_failed = 336330775;

const int isc_gbak_open_blob_failed = 336330776;

const int isc_gbak_put_blr_gen_id_failed = 336330777;

const int isc_gbak_unk_type = 336330778;

const int isc_gbak_comp_req_failed = 336330779;

const int isc_gbak_start_req_failed = 336330780;

const int isc_gbak_rec_failed = 336330781;

const int isc_gbak_rel_req_failed = 336330782;

const int isc_gbak_db_info_failed = 336330783;

const int isc_gbak_no_db_desc = 336330784;

const int isc_gbak_db_create_failed = 336330785;

const int isc_gbak_decomp_len_error = 336330786;

const int isc_gbak_tbl_missing = 336330787;

const int isc_gbak_blob_col_missing = 336330788;

const int isc_gbak_create_blob_failed = 336330789;

const int isc_gbak_put_seg_failed = 336330790;

const int isc_gbak_rec_len_exp = 336330791;

const int isc_gbak_inv_rec_len = 336330792;

const int isc_gbak_exp_data_type = 336330793;

const int isc_gbak_gen_id_failed = 336330794;

const int isc_gbak_unk_rec_type = 336330795;

const int isc_gbak_inv_bkup_ver = 336330796;

const int isc_gbak_missing_bkup_desc = 336330797;

const int isc_gbak_string_trunc = 336330798;

const int isc_gbak_cant_rest_record = 336330799;

const int isc_gbak_send_failed = 336330800;

const int isc_gbak_no_tbl_name = 336330801;

const int isc_gbak_unexp_eof = 336330802;

const int isc_gbak_db_format_too_old = 336330803;

const int isc_gbak_inv_array_dim = 336330804;

const int isc_gbak_xdr_len_expected = 336330807;

const int isc_gbak_open_bkup_error = 336330817;

const int isc_gbak_open_error = 336330818;

const int isc_gbak_missing_block_fac = 336330934;

const int isc_gbak_inv_block_fac = 336330935;

const int isc_gbak_block_fac_specified = 336330936;

const int isc_gbak_missing_username = 336330940;

const int isc_gbak_missing_password = 336330941;

const int isc_gbak_missing_skipped_bytes = 336330952;

const int isc_gbak_inv_skipped_bytes = 336330953;

const int isc_gbak_err_restore_charset = 336330965;

const int isc_gbak_err_restore_collation = 336330967;

const int isc_gbak_read_error = 336330972;

const int isc_gbak_write_error = 336330973;

const int isc_gbak_db_in_use = 336330985;

const int isc_gbak_sysmemex = 336330990;

const int isc_gbak_restore_role_failed = 336331002;

const int isc_gbak_role_op_missing = 336331005;

const int isc_gbak_page_buffers_missing = 336331010;

const int isc_gbak_page_buffers_wrong_param = 336331011;

const int isc_gbak_page_buffers_restore = 336331012;

const int isc_gbak_inv_size = 336331014;

const int isc_gbak_file_outof_sequence = 336331015;

const int isc_gbak_join_file_missing = 336331016;

const int isc_gbak_stdin_not_supptd = 336331017;

const int isc_gbak_stdout_not_supptd = 336331018;

const int isc_gbak_bkup_corrupt = 336331019;

const int isc_gbak_unk_db_file_spec = 336331020;

const int isc_gbak_hdr_write_failed = 336331021;

const int isc_gbak_disk_space_ex = 336331022;

const int isc_gbak_size_lt_min = 336331023;

const int isc_gbak_svc_name_missing = 336331025;

const int isc_gbak_not_ownr = 336331026;

const int isc_gbak_mode_req = 336331031;

const int isc_gbak_just_data = 336331033;

const int isc_gbak_data_only = 336331034;

const int isc_gbak_missing_interval = 336331078;

const int isc_gbak_wrong_interval = 336331079;

const int isc_gbak_verify_verbint = 336331081;

const int isc_gbak_option_only_restore = 336331082;

const int isc_gbak_option_only_backup = 336331083;

const int isc_gbak_option_conflict = 336331084;

const int isc_gbak_param_conflict = 336331085;

const int isc_gbak_option_repeated = 336331086;

const int isc_gbak_max_dbkey_recursion = 336331091;

const int isc_gbak_max_dbkey_length = 336331092;

const int isc_gbak_invalid_metadata = 336331093;

const int isc_gbak_invalid_data = 336331094;

const int isc_gbak_inv_bkup_ver2 = 336331096;

const int isc_gbak_db_format_too_old2 = 336331100;

const int isc_dsql_too_old_ods = 336397205;

const int isc_dsql_table_not_found = 336397206;

const int isc_dsql_view_not_found = 336397207;

const int isc_dsql_line_col_error = 336397208;

const int isc_dsql_unknown_pos = 336397209;

const int isc_dsql_no_dup_name = 336397210;

const int isc_dsql_too_many_values = 336397211;

const int isc_dsql_no_array_computed = 336397212;

const int isc_dsql_implicit_domain_name = 336397213;

const int isc_dsql_only_can_subscript_array = 336397214;

const int isc_dsql_max_sort_items = 336397215;

const int isc_dsql_max_group_items = 336397216;

const int isc_dsql_conflicting_sort_field = 336397217;

const int isc_dsql_derived_table_more_columns = 336397218;

const int isc_dsql_derived_table_less_columns = 336397219;

const int isc_dsql_derived_field_unnamed = 336397220;

const int isc_dsql_derived_field_dup_name = 336397221;

const int isc_dsql_derived_alias_select = 336397222;

const int isc_dsql_derived_alias_field = 336397223;

const int isc_dsql_auto_field_bad_pos = 336397224;

const int isc_dsql_cte_wrong_reference = 336397225;

const int isc_dsql_cte_cycle = 336397226;

const int isc_dsql_cte_outer_join = 336397227;

const int isc_dsql_cte_mult_references = 336397228;

const int isc_dsql_cte_not_a_union = 336397229;

const int isc_dsql_cte_nonrecurs_after_recurs = 336397230;

const int isc_dsql_cte_wrong_clause = 336397231;

const int isc_dsql_cte_union_all = 336397232;

const int isc_dsql_cte_miss_nonrecursive = 336397233;

const int isc_dsql_cte_nested_with = 336397234;

const int isc_dsql_col_more_than_once_using = 336397235;

const int isc_dsql_unsupp_feature_dialect = 336397236;

const int isc_dsql_cte_not_used = 336397237;

const int isc_dsql_col_more_than_once_view = 336397238;

const int isc_dsql_unsupported_in_auto_trans = 336397239;

const int isc_dsql_eval_unknode = 336397240;

const int isc_dsql_agg_wrongarg = 336397241;

const int isc_dsql_agg2_wrongarg = 336397242;

const int isc_dsql_nodateortime_pm_string = 336397243;

const int isc_dsql_invalid_datetime_subtract = 336397244;

const int isc_dsql_invalid_dateortime_add = 336397245;

const int isc_dsql_invalid_type_minus_date = 336397246;

const int isc_dsql_nostring_addsub_dial3 = 336397247;

const int isc_dsql_invalid_type_addsub_dial3 = 336397248;

const int isc_dsql_invalid_type_multip_dial1 = 336397249;

const int isc_dsql_nostring_multip_dial3 = 336397250;

const int isc_dsql_invalid_type_multip_dial3 = 336397251;

const int isc_dsql_mustuse_numeric_div_dial1 = 336397252;

const int isc_dsql_nostring_div_dial3 = 336397253;

const int isc_dsql_invalid_type_div_dial3 = 336397254;

const int isc_dsql_nostring_neg_dial3 = 336397255;

const int isc_dsql_invalid_type_neg = 336397256;

const int isc_dsql_max_distinct_items = 336397257;

const int isc_dsql_alter_charset_failed = 336397258;

const int isc_dsql_comment_on_failed = 336397259;

const int isc_dsql_create_func_failed = 336397260;

const int isc_dsql_alter_func_failed = 336397261;

const int isc_dsql_create_alter_func_failed = 336397262;

const int isc_dsql_drop_func_failed = 336397263;

const int isc_dsql_recreate_func_failed = 336397264;

const int isc_dsql_create_proc_failed = 336397265;

const int isc_dsql_alter_proc_failed = 336397266;

const int isc_dsql_create_alter_proc_failed = 336397267;

const int isc_dsql_drop_proc_failed = 336397268;

const int isc_dsql_recreate_proc_failed = 336397269;

const int isc_dsql_create_trigger_failed = 336397270;

const int isc_dsql_alter_trigger_failed = 336397271;

const int isc_dsql_create_alter_trigger_failed = 336397272;

const int isc_dsql_drop_trigger_failed = 336397273;

const int isc_dsql_recreate_trigger_failed = 336397274;

const int isc_dsql_create_collation_failed = 336397275;

const int isc_dsql_drop_collation_failed = 336397276;

const int isc_dsql_create_domain_failed = 336397277;

const int isc_dsql_alter_domain_failed = 336397278;

const int isc_dsql_drop_domain_failed = 336397279;

const int isc_dsql_create_except_failed = 336397280;

const int isc_dsql_alter_except_failed = 336397281;

const int isc_dsql_create_alter_except_failed = 336397282;

const int isc_dsql_recreate_except_failed = 336397283;

const int isc_dsql_drop_except_failed = 336397284;

const int isc_dsql_create_sequence_failed = 336397285;

const int isc_dsql_create_table_failed = 336397286;

const int isc_dsql_alter_table_failed = 336397287;

const int isc_dsql_drop_table_failed = 336397288;

const int isc_dsql_recreate_table_failed = 336397289;

const int isc_dsql_create_pack_failed = 336397290;

const int isc_dsql_alter_pack_failed = 336397291;

const int isc_dsql_create_alter_pack_failed = 336397292;

const int isc_dsql_drop_pack_failed = 336397293;

const int isc_dsql_recreate_pack_failed = 336397294;

const int isc_dsql_create_pack_body_failed = 336397295;

const int isc_dsql_drop_pack_body_failed = 336397296;

const int isc_dsql_recreate_pack_body_failed = 336397297;

const int isc_dsql_create_view_failed = 336397298;

const int isc_dsql_alter_view_failed = 336397299;

const int isc_dsql_create_alter_view_failed = 336397300;

const int isc_dsql_recreate_view_failed = 336397301;

const int isc_dsql_drop_view_failed = 336397302;

const int isc_dsql_drop_sequence_failed = 336397303;

const int isc_dsql_recreate_sequence_failed = 336397304;

const int isc_dsql_drop_index_failed = 336397305;

const int isc_dsql_drop_filter_failed = 336397306;

const int isc_dsql_drop_shadow_failed = 336397307;

const int isc_dsql_drop_role_failed = 336397308;

const int isc_dsql_drop_user_failed = 336397309;

const int isc_dsql_create_role_failed = 336397310;

const int isc_dsql_alter_role_failed = 336397311;

const int isc_dsql_alter_index_failed = 336397312;

const int isc_dsql_alter_database_failed = 336397313;

const int isc_dsql_create_shadow_failed = 336397314;

const int isc_dsql_create_filter_failed = 336397315;

const int isc_dsql_create_index_failed = 336397316;

const int isc_dsql_create_user_failed = 336397317;

const int isc_dsql_alter_user_failed = 336397318;

const int isc_dsql_grant_failed = 336397319;

const int isc_dsql_revoke_failed = 336397320;

const int isc_dsql_cte_recursive_aggregate = 336397321;

const int isc_dsql_mapping_failed = 336397322;

const int isc_dsql_alter_sequence_failed = 336397323;

const int isc_dsql_create_generator_failed = 336397324;

const int isc_dsql_set_generator_failed = 336397325;

const int isc_dsql_wlock_simple = 336397326;

const int isc_dsql_firstskip_rows = 336397327;

const int isc_dsql_wlock_aggregates = 336397328;

const int isc_dsql_wlock_conflict = 336397329;

const int isc_dsql_max_exception_arguments = 336397330;

const int isc_dsql_string_byte_length = 336397331;

const int isc_dsql_string_char_length = 336397332;

const int isc_dsql_max_nesting = 336397333;

const int isc_gsec_cant_open_db = 336723983;

const int isc_gsec_switches_error = 336723984;

const int isc_gsec_no_op_spec = 336723985;

const int isc_gsec_no_usr_name = 336723986;

const int isc_gsec_err_add = 336723987;

const int isc_gsec_err_modify = 336723988;

const int isc_gsec_err_find_mod = 336723989;

const int isc_gsec_err_rec_not_found = 336723990;

const int isc_gsec_err_delete = 336723991;

const int isc_gsec_err_find_del = 336723992;

const int isc_gsec_err_find_disp = 336723996;

const int isc_gsec_inv_param = 336723997;

const int isc_gsec_op_specified = 336723998;

const int isc_gsec_pw_specified = 336723999;

const int isc_gsec_uid_specified = 336724000;

const int isc_gsec_gid_specified = 336724001;

const int isc_gsec_proj_specified = 336724002;

const int isc_gsec_org_specified = 336724003;

const int isc_gsec_fname_specified = 336724004;

const int isc_gsec_mname_specified = 336724005;

const int isc_gsec_lname_specified = 336724006;

const int isc_gsec_inv_switch = 336724008;

const int isc_gsec_amb_switch = 336724009;

const int isc_gsec_no_op_specified = 336724010;

const int isc_gsec_params_not_allowed = 336724011;

const int isc_gsec_incompat_switch = 336724012;

const int isc_gsec_inv_username = 336724044;

const int isc_gsec_inv_pw_length = 336724045;

const int isc_gsec_db_specified = 336724046;

const int isc_gsec_db_admin_specified = 336724047;

const int isc_gsec_db_admin_pw_specified = 336724048;

const int isc_gsec_sql_role_specified = 336724049;

const int isc_gstat_unknown_switch = 336920577;

const int isc_gstat_retry = 336920578;

const int isc_gstat_wrong_ods = 336920579;

const int isc_gstat_unexpected_eof = 336920580;

const int isc_gstat_open_err = 336920605;

const int isc_gstat_read_err = 336920606;

const int isc_gstat_sysmemex = 336920607;

const int isc_fbsvcmgr_bad_am = 336986113;

const int isc_fbsvcmgr_bad_wm = 336986114;

const int isc_fbsvcmgr_bad_rs = 336986115;

const int isc_fbsvcmgr_info_err = 336986116;

const int isc_fbsvcmgr_query_err = 336986117;

const int isc_fbsvcmgr_switch_unknown = 336986118;

const int isc_fbsvcmgr_bad_sm = 336986159;

const int isc_fbsvcmgr_fp_open = 336986160;

const int isc_fbsvcmgr_fp_read = 336986161;

const int isc_fbsvcmgr_fp_empty = 336986162;

const int isc_fbsvcmgr_bad_arg = 336986164;

const int isc_fbsvcmgr_info_limbo = 336986170;

const int isc_fbsvcmgr_limbo_state = 336986171;

const int isc_fbsvcmgr_limbo_advise = 336986172;

const int isc_utl_trusted_switch = 337051649;

const int isc_nbackup_missing_param = 337117213;

const int isc_nbackup_allowed_switches = 337117214;

const int isc_nbackup_unknown_param = 337117215;

const int isc_nbackup_unknown_switch = 337117216;

const int isc_nbackup_nofetchpw_svc = 337117217;

const int isc_nbackup_pwfile_error = 337117218;

const int isc_nbackup_size_with_lock = 337117219;

const int isc_nbackup_no_switch = 337117220;

const int isc_nbackup_err_read = 337117223;

const int isc_nbackup_err_write = 337117224;

const int isc_nbackup_err_seek = 337117225;

const int isc_nbackup_err_opendb = 337117226;

const int isc_nbackup_err_fadvice = 337117227;

const int isc_nbackup_err_createdb = 337117228;

const int isc_nbackup_err_openbk = 337117229;

const int isc_nbackup_err_createbk = 337117230;

const int isc_nbackup_err_eofdb = 337117231;

const int isc_nbackup_fixup_wrongstate = 337117232;

const int isc_nbackup_err_db = 337117233;

const int isc_nbackup_userpw_toolong = 337117234;

const int isc_nbackup_lostrec_db = 337117235;

const int isc_nbackup_lostguid_db = 337117236;

const int isc_nbackup_err_eofhdrdb = 337117237;

const int isc_nbackup_db_notlock = 337117238;

const int isc_nbackup_lostguid_bk = 337117239;

const int isc_nbackup_page_changed = 337117240;

const int isc_nbackup_dbsize_inconsistent = 337117241;

const int isc_nbackup_failed_lzbk = 337117242;

const int isc_nbackup_err_eofhdrbk = 337117243;

const int isc_nbackup_invalid_incbk = 337117244;

const int isc_nbackup_unsupvers_incbk = 337117245;

const int isc_nbackup_invlevel_incbk = 337117246;

const int isc_nbackup_wrong_orderbk = 337117247;

const int isc_nbackup_err_eofbk = 337117248;

const int isc_nbackup_err_copy = 337117249;

const int isc_nbackup_err_eofhdr_restdb = 337117250;

const int isc_nbackup_lostguid_l0bk = 337117251;

const int isc_nbackup_switchd_parameter = 337117255;

const int isc_nbackup_user_stop = 337117257;

const int isc_nbackup_deco_parse = 337117259;

const int isc_trace_conflict_acts = 337182750;

const int isc_trace_act_notfound = 337182751;

const int isc_trace_switch_once = 337182752;

const int isc_trace_param_val_miss = 337182753;

const int isc_trace_param_invalid = 337182754;

const int isc_trace_switch_unknown = 337182755;

const int isc_trace_switch_svc_only = 337182756;

const int isc_trace_switch_user_only = 337182757;

const int isc_trace_switch_param_miss = 337182758;

const int isc_trace_param_act_notcompat = 337182759;

const int isc_trace_mandatory_switch_miss = 337182760;

const int isc_err_max = 1262;
